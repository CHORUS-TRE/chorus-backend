// Code generated by go-swagger; DO NOT EDIT.

package workbench_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new workbench service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new workbench service API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new workbench service API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for workbench service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	WorkbenchServiceCreateWorkbench(params *WorkbenchServiceCreateWorkbenchParams, opts ...ClientOption) (*WorkbenchServiceCreateWorkbenchOK, error)

	WorkbenchServiceDeleteWorkbench(params *WorkbenchServiceDeleteWorkbenchParams, opts ...ClientOption) (*WorkbenchServiceDeleteWorkbenchOK, error)

	WorkbenchServiceGetWorkbench(params *WorkbenchServiceGetWorkbenchParams, opts ...ClientOption) (*WorkbenchServiceGetWorkbenchOK, error)

	WorkbenchServiceInviteInWorkbench(params *WorkbenchServiceInviteInWorkbenchParams, opts ...ClientOption) (*WorkbenchServiceInviteInWorkbenchOK, error)

	WorkbenchServiceListWorkbenchs(params *WorkbenchServiceListWorkbenchsParams, opts ...ClientOption) (*WorkbenchServiceListWorkbenchsOK, error)

	WorkbenchServiceManageUserRoleInWorkbench(params *WorkbenchServiceManageUserRoleInWorkbenchParams, opts ...ClientOption) (*WorkbenchServiceManageUserRoleInWorkbenchOK, error)

	WorkbenchServiceRemoveUserFromWorkbench(params *WorkbenchServiceRemoveUserFromWorkbenchParams, opts ...ClientOption) (*WorkbenchServiceRemoveUserFromWorkbenchOK, error)

	WorkbenchServiceUpdateWorkbench(params *WorkbenchServiceUpdateWorkbenchParams, opts ...ClientOption) (*WorkbenchServiceUpdateWorkbenchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
WorkbenchServiceCreateWorkbench creates a workbench

This endpoint creates a workbench
*/
func (a *Client) WorkbenchServiceCreateWorkbench(params *WorkbenchServiceCreateWorkbenchParams, opts ...ClientOption) (*WorkbenchServiceCreateWorkbenchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkbenchServiceCreateWorkbenchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkbenchService_CreateWorkbench",
		Method:             "POST",
		PathPattern:        "/api/rest/v1/workbenchs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WorkbenchServiceCreateWorkbenchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkbenchServiceCreateWorkbenchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkbenchServiceCreateWorkbenchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkbenchServiceDeleteWorkbench deletes a workbench

This endpoint deletes a workbench
*/
func (a *Client) WorkbenchServiceDeleteWorkbench(params *WorkbenchServiceDeleteWorkbenchParams, opts ...ClientOption) (*WorkbenchServiceDeleteWorkbenchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkbenchServiceDeleteWorkbenchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkbenchService_DeleteWorkbench",
		Method:             "DELETE",
		PathPattern:        "/api/rest/v1/workbenchs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WorkbenchServiceDeleteWorkbenchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkbenchServiceDeleteWorkbenchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkbenchServiceDeleteWorkbenchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkbenchServiceGetWorkbench gets a workbench

This endpoint returns a workbench
*/
func (a *Client) WorkbenchServiceGetWorkbench(params *WorkbenchServiceGetWorkbenchParams, opts ...ClientOption) (*WorkbenchServiceGetWorkbenchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkbenchServiceGetWorkbenchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkbenchService_GetWorkbench",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/workbenchs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WorkbenchServiceGetWorkbenchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkbenchServiceGetWorkbenchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkbenchServiceGetWorkbenchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkbenchServiceInviteInWorkbench invites a user to a workbench

This endpoint invites a user to a workbench
*/
func (a *Client) WorkbenchServiceInviteInWorkbench(params *WorkbenchServiceInviteInWorkbenchParams, opts ...ClientOption) (*WorkbenchServiceInviteInWorkbenchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkbenchServiceInviteInWorkbenchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkbenchService_InviteInWorkbench",
		Method:             "PUT",
		PathPattern:        "/api/rest/v1/workbenchs/{id}/invite",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WorkbenchServiceInviteInWorkbenchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkbenchServiceInviteInWorkbenchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkbenchServiceInviteInWorkbenchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkbenchServiceListWorkbenchs lists workbenchs

This endpoint returns a list of workbenchs
*/
func (a *Client) WorkbenchServiceListWorkbenchs(params *WorkbenchServiceListWorkbenchsParams, opts ...ClientOption) (*WorkbenchServiceListWorkbenchsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkbenchServiceListWorkbenchsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkbenchService_ListWorkbenchs",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/workbenchs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WorkbenchServiceListWorkbenchsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkbenchServiceListWorkbenchsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkbenchServiceListWorkbenchsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkbenchServiceManageUserRoleInWorkbench manages a user s role in a workbench

This endpoint manages a user's role in a workbench
*/
func (a *Client) WorkbenchServiceManageUserRoleInWorkbench(params *WorkbenchServiceManageUserRoleInWorkbenchParams, opts ...ClientOption) (*WorkbenchServiceManageUserRoleInWorkbenchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkbenchServiceManageUserRoleInWorkbenchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkbenchService_ManageUserRoleInWorkbench",
		Method:             "POST",
		PathPattern:        "/api/rest/v1/workbenchs/{id}/user/{userId}/role",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WorkbenchServiceManageUserRoleInWorkbenchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkbenchServiceManageUserRoleInWorkbenchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkbenchServiceManageUserRoleInWorkbenchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkbenchServiceRemoveUserFromWorkbench removes a user from a workbench

This endpoint removes a user from a workbench
*/
func (a *Client) WorkbenchServiceRemoveUserFromWorkbench(params *WorkbenchServiceRemoveUserFromWorkbenchParams, opts ...ClientOption) (*WorkbenchServiceRemoveUserFromWorkbenchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkbenchServiceRemoveUserFromWorkbenchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkbenchService_RemoveUserFromWorkbench",
		Method:             "DELETE",
		PathPattern:        "/api/rest/v1/workbenchs/{id}/user/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WorkbenchServiceRemoveUserFromWorkbenchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkbenchServiceRemoveUserFromWorkbenchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkbenchServiceRemoveUserFromWorkbenchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkbenchServiceUpdateWorkbench updates a workbench

This endpoint updates a workbench
*/
func (a *Client) WorkbenchServiceUpdateWorkbench(params *WorkbenchServiceUpdateWorkbenchParams, opts ...ClientOption) (*WorkbenchServiceUpdateWorkbenchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkbenchServiceUpdateWorkbenchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkbenchService_UpdateWorkbench",
		Method:             "PUT",
		PathPattern:        "/api/rest/v1/workbenchs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WorkbenchServiceUpdateWorkbenchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkbenchServiceUpdateWorkbenchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkbenchServiceUpdateWorkbenchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
