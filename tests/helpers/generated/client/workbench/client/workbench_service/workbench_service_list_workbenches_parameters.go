// Code generated by go-swagger; DO NOT EDIT.

package workbench_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewWorkbenchServiceListWorkbenchesParams creates a new WorkbenchServiceListWorkbenchesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewWorkbenchServiceListWorkbenchesParams() *WorkbenchServiceListWorkbenchesParams {
	return &WorkbenchServiceListWorkbenchesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewWorkbenchServiceListWorkbenchesParamsWithTimeout creates a new WorkbenchServiceListWorkbenchesParams object
// with the ability to set a timeout on a request.
func NewWorkbenchServiceListWorkbenchesParamsWithTimeout(timeout time.Duration) *WorkbenchServiceListWorkbenchesParams {
	return &WorkbenchServiceListWorkbenchesParams{
		timeout: timeout,
	}
}

// NewWorkbenchServiceListWorkbenchesParamsWithContext creates a new WorkbenchServiceListWorkbenchesParams object
// with the ability to set a context for a request.
func NewWorkbenchServiceListWorkbenchesParamsWithContext(ctx context.Context) *WorkbenchServiceListWorkbenchesParams {
	return &WorkbenchServiceListWorkbenchesParams{
		Context: ctx,
	}
}

// NewWorkbenchServiceListWorkbenchesParamsWithHTTPClient creates a new WorkbenchServiceListWorkbenchesParams object
// with the ability to set a custom HTTPClient for a request.
func NewWorkbenchServiceListWorkbenchesParamsWithHTTPClient(client *http.Client) *WorkbenchServiceListWorkbenchesParams {
	return &WorkbenchServiceListWorkbenchesParams{
		HTTPClient: client,
	}
}

/*
WorkbenchServiceListWorkbenchesParams contains all the parameters to send to the API endpoint

	for the workbench service list workbenches operation.

	Typically these are written to a http.Request.
*/
type WorkbenchServiceListWorkbenchesParams struct {

	/* PaginationLimit.

	   Optionally limit the number of results (between 1 and 500)

	   Format: int64
	*/
	PaginationLimit *int64

	/* PaginationOffset.

	   Optionally offset the number of results

	   Format: int64
	*/
	PaginationOffset *int64

	/* PaginationQuery.

	   Optionally filter the results
	*/
	PaginationQuery []string

	// PaginationSortOrder.
	PaginationSortOrder *string

	// PaginationSortType.
	PaginationSortType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the workbench service list workbenches params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *WorkbenchServiceListWorkbenchesParams) WithDefaults() *WorkbenchServiceListWorkbenchesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the workbench service list workbenches params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *WorkbenchServiceListWorkbenchesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the workbench service list workbenches params
func (o *WorkbenchServiceListWorkbenchesParams) WithTimeout(timeout time.Duration) *WorkbenchServiceListWorkbenchesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the workbench service list workbenches params
func (o *WorkbenchServiceListWorkbenchesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the workbench service list workbenches params
func (o *WorkbenchServiceListWorkbenchesParams) WithContext(ctx context.Context) *WorkbenchServiceListWorkbenchesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the workbench service list workbenches params
func (o *WorkbenchServiceListWorkbenchesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the workbench service list workbenches params
func (o *WorkbenchServiceListWorkbenchesParams) WithHTTPClient(client *http.Client) *WorkbenchServiceListWorkbenchesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the workbench service list workbenches params
func (o *WorkbenchServiceListWorkbenchesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPaginationLimit adds the paginationLimit to the workbench service list workbenches params
func (o *WorkbenchServiceListWorkbenchesParams) WithPaginationLimit(paginationLimit *int64) *WorkbenchServiceListWorkbenchesParams {
	o.SetPaginationLimit(paginationLimit)
	return o
}

// SetPaginationLimit adds the paginationLimit to the workbench service list workbenches params
func (o *WorkbenchServiceListWorkbenchesParams) SetPaginationLimit(paginationLimit *int64) {
	o.PaginationLimit = paginationLimit
}

// WithPaginationOffset adds the paginationOffset to the workbench service list workbenches params
func (o *WorkbenchServiceListWorkbenchesParams) WithPaginationOffset(paginationOffset *int64) *WorkbenchServiceListWorkbenchesParams {
	o.SetPaginationOffset(paginationOffset)
	return o
}

// SetPaginationOffset adds the paginationOffset to the workbench service list workbenches params
func (o *WorkbenchServiceListWorkbenchesParams) SetPaginationOffset(paginationOffset *int64) {
	o.PaginationOffset = paginationOffset
}

// WithPaginationQuery adds the paginationQuery to the workbench service list workbenches params
func (o *WorkbenchServiceListWorkbenchesParams) WithPaginationQuery(paginationQuery []string) *WorkbenchServiceListWorkbenchesParams {
	o.SetPaginationQuery(paginationQuery)
	return o
}

// SetPaginationQuery adds the paginationQuery to the workbench service list workbenches params
func (o *WorkbenchServiceListWorkbenchesParams) SetPaginationQuery(paginationQuery []string) {
	o.PaginationQuery = paginationQuery
}

// WithPaginationSortOrder adds the paginationSortOrder to the workbench service list workbenches params
func (o *WorkbenchServiceListWorkbenchesParams) WithPaginationSortOrder(paginationSortOrder *string) *WorkbenchServiceListWorkbenchesParams {
	o.SetPaginationSortOrder(paginationSortOrder)
	return o
}

// SetPaginationSortOrder adds the paginationSortOrder to the workbench service list workbenches params
func (o *WorkbenchServiceListWorkbenchesParams) SetPaginationSortOrder(paginationSortOrder *string) {
	o.PaginationSortOrder = paginationSortOrder
}

// WithPaginationSortType adds the paginationSortType to the workbench service list workbenches params
func (o *WorkbenchServiceListWorkbenchesParams) WithPaginationSortType(paginationSortType *string) *WorkbenchServiceListWorkbenchesParams {
	o.SetPaginationSortType(paginationSortType)
	return o
}

// SetPaginationSortType adds the paginationSortType to the workbench service list workbenches params
func (o *WorkbenchServiceListWorkbenchesParams) SetPaginationSortType(paginationSortType *string) {
	o.PaginationSortType = paginationSortType
}

// WriteToRequest writes these params to a swagger request
func (o *WorkbenchServiceListWorkbenchesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.PaginationLimit != nil {

		// query param pagination.limit
		var qrPaginationLimit int64

		if o.PaginationLimit != nil {
			qrPaginationLimit = *o.PaginationLimit
		}
		qPaginationLimit := swag.FormatInt64(qrPaginationLimit)
		if qPaginationLimit != "" {

			if err := r.SetQueryParam("pagination.limit", qPaginationLimit); err != nil {
				return err
			}
		}
	}

	if o.PaginationOffset != nil {

		// query param pagination.offset
		var qrPaginationOffset int64

		if o.PaginationOffset != nil {
			qrPaginationOffset = *o.PaginationOffset
		}
		qPaginationOffset := swag.FormatInt64(qrPaginationOffset)
		if qPaginationOffset != "" {

			if err := r.SetQueryParam("pagination.offset", qPaginationOffset); err != nil {
				return err
			}
		}
	}

	if o.PaginationQuery != nil {

		// binding items for pagination.query
		joinedPaginationQuery := o.bindParamPaginationQuery(reg)

		// query array param pagination.query
		if err := r.SetQueryParam("pagination.query", joinedPaginationQuery...); err != nil {
			return err
		}
	}

	if o.PaginationSortOrder != nil {

		// query param pagination.sort.order
		var qrPaginationSortOrder string

		if o.PaginationSortOrder != nil {
			qrPaginationSortOrder = *o.PaginationSortOrder
		}
		qPaginationSortOrder := qrPaginationSortOrder
		if qPaginationSortOrder != "" {

			if err := r.SetQueryParam("pagination.sort.order", qPaginationSortOrder); err != nil {
				return err
			}
		}
	}

	if o.PaginationSortType != nil {

		// query param pagination.sort.type
		var qrPaginationSortType string

		if o.PaginationSortType != nil {
			qrPaginationSortType = *o.PaginationSortType
		}
		qPaginationSortType := qrPaginationSortType
		if qPaginationSortType != "" {

			if err := r.SetQueryParam("pagination.sort.type", qPaginationSortType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamWorkbenchServiceListWorkbenches binds the parameter pagination.query
func (o *WorkbenchServiceListWorkbenchesParams) bindParamPaginationQuery(formats strfmt.Registry) []string {
	paginationQueryIR := o.PaginationQuery

	var paginationQueryIC []string
	for _, paginationQueryIIR := range paginationQueryIR { // explode []string

		paginationQueryIIV := paginationQueryIIR // string as string
		paginationQueryIC = append(paginationQueryIC, paginationQueryIIV)
	}

	// items.CollectionFormat: "multi"
	paginationQueryIS := swag.JoinByFormat(paginationQueryIC, "multi")

	return paginationQueryIS
}
