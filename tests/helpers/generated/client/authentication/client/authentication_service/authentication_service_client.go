// Code generated by go-swagger; DO NOT EDIT.

package authentication_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new authentication service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new authentication service API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new authentication service API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for authentication service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AuthenticationServiceAuthenticate(params *AuthenticationServiceAuthenticateParams, opts ...ClientOption) (*AuthenticationServiceAuthenticateOK, error)

	AuthenticationServiceAuthenticateOauth(params *AuthenticationServiceAuthenticateOauthParams, opts ...ClientOption) (*AuthenticationServiceAuthenticateOauthOK, error)

	AuthenticationServiceAuthenticateOauthRedirect(params *AuthenticationServiceAuthenticateOauthRedirectParams, opts ...ClientOption) (*AuthenticationServiceAuthenticateOauthRedirectOK, error)

	AuthenticationServiceAuthenticateOauthRedirect2(params *AuthenticationServiceAuthenticateOauthRedirect2Params, opts ...ClientOption) (*AuthenticationServiceAuthenticateOauthRedirect2OK, error)

	AuthenticationServiceGetAuthenticationModes(params *AuthenticationServiceGetAuthenticationModesParams, opts ...ClientOption) (*AuthenticationServiceGetAuthenticationModesOK, error)

	AuthenticationServiceRefreshToken(params *AuthenticationServiceRefreshTokenParams, opts ...ClientOption) (*AuthenticationServiceRefreshTokenOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AuthenticationServiceAuthenticate authenticates

This endpoint authenticates a user
*/
func (a *Client) AuthenticationServiceAuthenticate(params *AuthenticationServiceAuthenticateParams, opts ...ClientOption) (*AuthenticationServiceAuthenticateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthenticationServiceAuthenticateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AuthenticationService_Authenticate",
		Method:             "POST",
		PathPattern:        "/api/rest/v1/authentication/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AuthenticationServiceAuthenticateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthenticationServiceAuthenticateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthenticationServiceAuthenticateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AuthenticationServiceAuthenticateOauth authenticates using auth 2 0

This endpoint redirects a user to a configured oauth2 provider
*/
func (a *Client) AuthenticationServiceAuthenticateOauth(params *AuthenticationServiceAuthenticateOauthParams, opts ...ClientOption) (*AuthenticationServiceAuthenticateOauthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthenticationServiceAuthenticateOauthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AuthenticationService_AuthenticateOauth",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/authentication/oauth2/{id}/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AuthenticationServiceAuthenticateOauthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthenticationServiceAuthenticateOauthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthenticationServiceAuthenticateOauthDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AuthenticationServiceAuthenticateOauthRedirect authenticates redirect using auth 2 0

This endpoint is called by the provider after auth for the backend to retrieve the user profile
*/
func (a *Client) AuthenticationServiceAuthenticateOauthRedirect(params *AuthenticationServiceAuthenticateOauthRedirectParams, opts ...ClientOption) (*AuthenticationServiceAuthenticateOauthRedirectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthenticationServiceAuthenticateOauthRedirectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AuthenticationService_AuthenticateOauthRedirect",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/authentication/oauth2/{id}/redirect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AuthenticationServiceAuthenticateOauthRedirectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthenticationServiceAuthenticateOauthRedirectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthenticationServiceAuthenticateOauthRedirectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AuthenticationServiceAuthenticateOauthRedirect2 authenticates redirect using auth 2 0

This endpoint is called by the provider after auth for the backend to retrieve the user profile
*/
func (a *Client) AuthenticationServiceAuthenticateOauthRedirect2(params *AuthenticationServiceAuthenticateOauthRedirect2Params, opts ...ClientOption) (*AuthenticationServiceAuthenticateOauthRedirect2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthenticationServiceAuthenticateOauthRedirect2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "AuthenticationService_AuthenticateOauthRedirect2",
		Method:             "POST",
		PathPattern:        "/api/rest/v1/authentication/oauth2/{id}/redirect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AuthenticationServiceAuthenticateOauthRedirect2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthenticationServiceAuthenticateOauthRedirect2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthenticationServiceAuthenticateOauthRedirect2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AuthenticationServiceGetAuthenticationModes gets list of possible way to authenticate

This endpoint list all the way the backend accept authentication
*/
func (a *Client) AuthenticationServiceGetAuthenticationModes(params *AuthenticationServiceGetAuthenticationModesParams, opts ...ClientOption) (*AuthenticationServiceGetAuthenticationModesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthenticationServiceGetAuthenticationModesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AuthenticationService_GetAuthenticationModes",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/authentication/modes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AuthenticationServiceGetAuthenticationModesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthenticationServiceGetAuthenticationModesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthenticationServiceGetAuthenticationModesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AuthenticationServiceRefreshToken refreshes token

This endpoint refreshes a user token
*/
func (a *Client) AuthenticationServiceRefreshToken(params *AuthenticationServiceRefreshTokenParams, opts ...ClientOption) (*AuthenticationServiceRefreshTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthenticationServiceRefreshTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AuthenticationService_RefreshToken",
		Method:             "POST",
		PathPattern:        "/api/rest/v1/authentication/refresh-token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AuthenticationServiceRefreshTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthenticationServiceRefreshTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthenticationServiceRefreshTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
