// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChorusWorkspaceFile chorus workspace file
//
// swagger:model chorusWorkspaceFile
type ChorusWorkspaceFile struct {

	// File content will be empty when listing files
	// Format: byte
	Content strfmt.Base64 `json:"content,omitempty"`

	// is directory
	IsDirectory bool `json:"isDirectory,omitempty"`

	// mime type
	MimeType string `json:"mimeType,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Unique identifier for the file within the workspace
	Path string `json:"path,omitempty"`

	// size
	Size string `json:"size,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`
}

// Validate validates this chorus workspace file
func (m *ChorusWorkspaceFile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChorusWorkspaceFile) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this chorus workspace file based on context it is used
func (m *ChorusWorkspaceFile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ChorusWorkspaceFile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChorusWorkspaceFile) UnmarshalBinary(b []byte) error {
	var res ChorusWorkspaceFile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
