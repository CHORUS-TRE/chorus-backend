// Code generated by go-swagger; DO NOT EDIT.

package workspace_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new workspace service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new workspace service API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new workspace service API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for workspace service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	WorkspaceServiceCreateWorkspace(params *WorkspaceServiceCreateWorkspaceParams, opts ...ClientOption) (*WorkspaceServiceCreateWorkspaceOK, error)

	WorkspaceServiceDeleteWorkspace(params *WorkspaceServiceDeleteWorkspaceParams, opts ...ClientOption) (*WorkspaceServiceDeleteWorkspaceOK, error)

	WorkspaceServiceGetWorkspace(params *WorkspaceServiceGetWorkspaceParams, opts ...ClientOption) (*WorkspaceServiceGetWorkspaceOK, error)

	WorkspaceServiceInviteInWorkspace(params *WorkspaceServiceInviteInWorkspaceParams, opts ...ClientOption) (*WorkspaceServiceInviteInWorkspaceOK, error)

	WorkspaceServiceListWorkspaces(params *WorkspaceServiceListWorkspacesParams, opts ...ClientOption) (*WorkspaceServiceListWorkspacesOK, error)

	WorkspaceServiceManageUserRoleInWorkspace(params *WorkspaceServiceManageUserRoleInWorkspaceParams, opts ...ClientOption) (*WorkspaceServiceManageUserRoleInWorkspaceOK, error)

	WorkspaceServiceRemoveUserFromWorkspace(params *WorkspaceServiceRemoveUserFromWorkspaceParams, opts ...ClientOption) (*WorkspaceServiceRemoveUserFromWorkspaceOK, error)

	WorkspaceServiceUpdateWorkspace(params *WorkspaceServiceUpdateWorkspaceParams, opts ...ClientOption) (*WorkspaceServiceUpdateWorkspaceOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
WorkspaceServiceCreateWorkspace creates a workspace

This endpoint creates a workspace
*/
func (a *Client) WorkspaceServiceCreateWorkspace(params *WorkspaceServiceCreateWorkspaceParams, opts ...ClientOption) (*WorkspaceServiceCreateWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkspaceServiceCreateWorkspaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkspaceService_CreateWorkspace",
		Method:             "POST",
		PathPattern:        "/api/rest/v1/workspaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WorkspaceServiceCreateWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkspaceServiceCreateWorkspaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkspaceServiceCreateWorkspaceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkspaceServiceDeleteWorkspace deletes a workspace

This endpoint deletes a workspace
*/
func (a *Client) WorkspaceServiceDeleteWorkspace(params *WorkspaceServiceDeleteWorkspaceParams, opts ...ClientOption) (*WorkspaceServiceDeleteWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkspaceServiceDeleteWorkspaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkspaceService_DeleteWorkspace",
		Method:             "DELETE",
		PathPattern:        "/api/rest/v1/workspaces/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WorkspaceServiceDeleteWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkspaceServiceDeleteWorkspaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkspaceServiceDeleteWorkspaceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkspaceServiceGetWorkspace gets a workspace

This endpoint returns a workspace
*/
func (a *Client) WorkspaceServiceGetWorkspace(params *WorkspaceServiceGetWorkspaceParams, opts ...ClientOption) (*WorkspaceServiceGetWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkspaceServiceGetWorkspaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkspaceService_GetWorkspace",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/workspaces/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WorkspaceServiceGetWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkspaceServiceGetWorkspaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkspaceServiceGetWorkspaceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkspaceServiceInviteInWorkspace invites a user to a workspace

This endpoint invites a user to a workspace
*/
func (a *Client) WorkspaceServiceInviteInWorkspace(params *WorkspaceServiceInviteInWorkspaceParams, opts ...ClientOption) (*WorkspaceServiceInviteInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkspaceServiceInviteInWorkspaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkspaceService_InviteInWorkspace",
		Method:             "PUT",
		PathPattern:        "/api/rest/v1/workspaces/{id}/invite",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WorkspaceServiceInviteInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkspaceServiceInviteInWorkspaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkspaceServiceInviteInWorkspaceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkspaceServiceListWorkspaces lists workspaces

This endpoint returns a list of workspaces
*/
func (a *Client) WorkspaceServiceListWorkspaces(params *WorkspaceServiceListWorkspacesParams, opts ...ClientOption) (*WorkspaceServiceListWorkspacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkspaceServiceListWorkspacesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkspaceService_ListWorkspaces",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/workspaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WorkspaceServiceListWorkspacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkspaceServiceListWorkspacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkspaceServiceListWorkspacesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkspaceServiceManageUserRoleInWorkspace manages a user s role in a workspace

This endpoint manages a user's role in a workspace
*/
func (a *Client) WorkspaceServiceManageUserRoleInWorkspace(params *WorkspaceServiceManageUserRoleInWorkspaceParams, opts ...ClientOption) (*WorkspaceServiceManageUserRoleInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkspaceServiceManageUserRoleInWorkspaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkspaceService_ManageUserRoleInWorkspace",
		Method:             "POST",
		PathPattern:        "/api/rest/v1/workspaces/{id}/user/{userId}/role",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WorkspaceServiceManageUserRoleInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkspaceServiceManageUserRoleInWorkspaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkspaceServiceManageUserRoleInWorkspaceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkspaceServiceRemoveUserFromWorkspace removes a user from a workspace

This endpoint removes a user from a workspace
*/
func (a *Client) WorkspaceServiceRemoveUserFromWorkspace(params *WorkspaceServiceRemoveUserFromWorkspaceParams, opts ...ClientOption) (*WorkspaceServiceRemoveUserFromWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkspaceServiceRemoveUserFromWorkspaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkspaceService_RemoveUserFromWorkspace",
		Method:             "DELETE",
		PathPattern:        "/api/rest/v1/workspaces/{id}/user/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WorkspaceServiceRemoveUserFromWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkspaceServiceRemoveUserFromWorkspaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkspaceServiceRemoveUserFromWorkspaceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkspaceServiceUpdateWorkspace updates a workspace

This endpoint updates a workspace
*/
func (a *Client) WorkspaceServiceUpdateWorkspace(params *WorkspaceServiceUpdateWorkspaceParams, opts ...ClientOption) (*WorkspaceServiceUpdateWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkspaceServiceUpdateWorkspaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkspaceService_UpdateWorkspace",
		Method:             "PUT",
		PathPattern:        "/api/rest/v1/workspaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WorkspaceServiceUpdateWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkspaceServiceUpdateWorkspaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkspaceServiceUpdateWorkspaceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
