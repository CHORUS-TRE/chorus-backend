// Code generated by go-swagger; DO NOT EDIT.

package workspace_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new workspace service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new workspace service API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new workspace service API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for workspace service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	WorkspaceServiceCreateWorkspace(params *WorkspaceServiceCreateWorkspaceParams, opts ...ClientOption) (*WorkspaceServiceCreateWorkspaceOK, error)

	WorkspaceServiceCreateWorkspaceFile(params *WorkspaceServiceCreateWorkspaceFileParams, opts ...ClientOption) (*WorkspaceServiceCreateWorkspaceFileOK, error)

	WorkspaceServiceDeleteWorkspace(params *WorkspaceServiceDeleteWorkspaceParams, opts ...ClientOption) (*WorkspaceServiceDeleteWorkspaceOK, error)

	WorkspaceServiceDeleteWorkspaceFile(params *WorkspaceServiceDeleteWorkspaceFileParams, opts ...ClientOption) (*WorkspaceServiceDeleteWorkspaceFileOK, error)

	WorkspaceServiceGetWorkspace(params *WorkspaceServiceGetWorkspaceParams, opts ...ClientOption) (*WorkspaceServiceGetWorkspaceOK, error)

	WorkspaceServiceGetWorkspaceFile(params *WorkspaceServiceGetWorkspaceFileParams, opts ...ClientOption) (*WorkspaceServiceGetWorkspaceFileOK, error)

	WorkspaceServiceListWorkspaces(params *WorkspaceServiceListWorkspacesParams, opts ...ClientOption) (*WorkspaceServiceListWorkspacesOK, error)

	WorkspaceServiceUpdateWorkspace(params *WorkspaceServiceUpdateWorkspaceParams, opts ...ClientOption) (*WorkspaceServiceUpdateWorkspaceOK, error)

	WorkspaceServiceUpdateWorkspaceFile(params *WorkspaceServiceUpdateWorkspaceFileParams, opts ...ClientOption) (*WorkspaceServiceUpdateWorkspaceFileOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
WorkspaceServiceCreateWorkspace creates a workspace

This endpoint creates a workspace
*/
func (a *Client) WorkspaceServiceCreateWorkspace(params *WorkspaceServiceCreateWorkspaceParams, opts ...ClientOption) (*WorkspaceServiceCreateWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkspaceServiceCreateWorkspaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkspaceService_CreateWorkspace",
		Method:             "POST",
		PathPattern:        "/api/rest/v1/workspaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WorkspaceServiceCreateWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkspaceServiceCreateWorkspaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkspaceServiceCreateWorkspaceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkspaceServiceCreateWorkspaceFile creates a file in a workspace

This endpoint creates a file in a workspace at the specified path
*/
func (a *Client) WorkspaceServiceCreateWorkspaceFile(params *WorkspaceServiceCreateWorkspaceFileParams, opts ...ClientOption) (*WorkspaceServiceCreateWorkspaceFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkspaceServiceCreateWorkspaceFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkspaceService_CreateWorkspaceFile",
		Method:             "POST",
		PathPattern:        "/api/rest/v1/workspaces/{workspaceId}/files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WorkspaceServiceCreateWorkspaceFileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkspaceServiceCreateWorkspaceFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkspaceServiceCreateWorkspaceFileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkspaceServiceDeleteWorkspace deletes a workspace

This endpoint deletes a workspace
*/
func (a *Client) WorkspaceServiceDeleteWorkspace(params *WorkspaceServiceDeleteWorkspaceParams, opts ...ClientOption) (*WorkspaceServiceDeleteWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkspaceServiceDeleteWorkspaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkspaceService_DeleteWorkspace",
		Method:             "DELETE",
		PathPattern:        "/api/rest/v1/workspaces/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WorkspaceServiceDeleteWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkspaceServiceDeleteWorkspaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkspaceServiceDeleteWorkspaceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkspaceServiceDeleteWorkspaceFile deletes a file in a workspace

This endpoint deletes a file in a workspace at the specified path
*/
func (a *Client) WorkspaceServiceDeleteWorkspaceFile(params *WorkspaceServiceDeleteWorkspaceFileParams, opts ...ClientOption) (*WorkspaceServiceDeleteWorkspaceFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkspaceServiceDeleteWorkspaceFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkspaceService_DeleteWorkspaceFile",
		Method:             "DELETE",
		PathPattern:        "/api/rest/v1/workspaces/{workspaceId}/files/{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WorkspaceServiceDeleteWorkspaceFileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkspaceServiceDeleteWorkspaceFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkspaceServiceDeleteWorkspaceFileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkspaceServiceGetWorkspace gets a workspace

This endpoint returns a workspace
*/
func (a *Client) WorkspaceServiceGetWorkspace(params *WorkspaceServiceGetWorkspaceParams, opts ...ClientOption) (*WorkspaceServiceGetWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkspaceServiceGetWorkspaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkspaceService_GetWorkspace",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/workspaces/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WorkspaceServiceGetWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkspaceServiceGetWorkspaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkspaceServiceGetWorkspaceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkspaceServiceGetWorkspaceFile lists files in a workspace

This endpoint lists all files at given path within a workspace
*/
func (a *Client) WorkspaceServiceGetWorkspaceFile(params *WorkspaceServiceGetWorkspaceFileParams, opts ...ClientOption) (*WorkspaceServiceGetWorkspaceFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkspaceServiceGetWorkspaceFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkspaceService_GetWorkspaceFile",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/workspaces/{workspaceId}/files/{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WorkspaceServiceGetWorkspaceFileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkspaceServiceGetWorkspaceFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkspaceServiceGetWorkspaceFileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkspaceServiceListWorkspaces lists workspaces

This endpoint returns a list of workspaces
*/
func (a *Client) WorkspaceServiceListWorkspaces(params *WorkspaceServiceListWorkspacesParams, opts ...ClientOption) (*WorkspaceServiceListWorkspacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkspaceServiceListWorkspacesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkspaceService_ListWorkspaces",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/workspaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WorkspaceServiceListWorkspacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkspaceServiceListWorkspacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkspaceServiceListWorkspacesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkspaceServiceUpdateWorkspace updates a workspace

This endpoint updates a workspace
*/
func (a *Client) WorkspaceServiceUpdateWorkspace(params *WorkspaceServiceUpdateWorkspaceParams, opts ...ClientOption) (*WorkspaceServiceUpdateWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkspaceServiceUpdateWorkspaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkspaceService_UpdateWorkspace",
		Method:             "PUT",
		PathPattern:        "/api/rest/v1/workspaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WorkspaceServiceUpdateWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkspaceServiceUpdateWorkspaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkspaceServiceUpdateWorkspaceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkspaceServiceUpdateWorkspaceFile updates a file in a workspace

This endpoint updates (rename or moves) a file in a workspace at the specified path
*/
func (a *Client) WorkspaceServiceUpdateWorkspaceFile(params *WorkspaceServiceUpdateWorkspaceFileParams, opts ...ClientOption) (*WorkspaceServiceUpdateWorkspaceFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkspaceServiceUpdateWorkspaceFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkspaceService_UpdateWorkspaceFile",
		Method:             "PUT",
		PathPattern:        "/api/rest/v1/workspaces/{workspaceId}/files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WorkspaceServiceUpdateWorkspaceFileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkspaceServiceUpdateWorkspaceFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkspaceServiceUpdateWorkspaceFileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
