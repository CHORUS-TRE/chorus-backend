// Code generated by go-swagger; DO NOT EDIT.

package workspace_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/CHORUS-TRE/chorus-backend/tests/helpers/generated/client/workspace/models"
)

// NewWorkspaceServiceCreateWorkspaceFileParams creates a new WorkspaceServiceCreateWorkspaceFileParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewWorkspaceServiceCreateWorkspaceFileParams() *WorkspaceServiceCreateWorkspaceFileParams {
	return &WorkspaceServiceCreateWorkspaceFileParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewWorkspaceServiceCreateWorkspaceFileParamsWithTimeout creates a new WorkspaceServiceCreateWorkspaceFileParams object
// with the ability to set a timeout on a request.
func NewWorkspaceServiceCreateWorkspaceFileParamsWithTimeout(timeout time.Duration) *WorkspaceServiceCreateWorkspaceFileParams {
	return &WorkspaceServiceCreateWorkspaceFileParams{
		timeout: timeout,
	}
}

// NewWorkspaceServiceCreateWorkspaceFileParamsWithContext creates a new WorkspaceServiceCreateWorkspaceFileParams object
// with the ability to set a context for a request.
func NewWorkspaceServiceCreateWorkspaceFileParamsWithContext(ctx context.Context) *WorkspaceServiceCreateWorkspaceFileParams {
	return &WorkspaceServiceCreateWorkspaceFileParams{
		Context: ctx,
	}
}

// NewWorkspaceServiceCreateWorkspaceFileParamsWithHTTPClient creates a new WorkspaceServiceCreateWorkspaceFileParams object
// with the ability to set a custom HTTPClient for a request.
func NewWorkspaceServiceCreateWorkspaceFileParamsWithHTTPClient(client *http.Client) *WorkspaceServiceCreateWorkspaceFileParams {
	return &WorkspaceServiceCreateWorkspaceFileParams{
		HTTPClient: client,
	}
}

/*
WorkspaceServiceCreateWorkspaceFileParams contains all the parameters to send to the API endpoint

	for the workspace service create workspace file operation.

	Typically these are written to a http.Request.
*/
type WorkspaceServiceCreateWorkspaceFileParams struct {

	// File.
	File *models.ChorusWorkspaceFile

	// Path.
	Path string

	// WorkspaceID.
	//
	// Format: uint64
	WorkspaceID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the workspace service create workspace file params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *WorkspaceServiceCreateWorkspaceFileParams) WithDefaults() *WorkspaceServiceCreateWorkspaceFileParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the workspace service create workspace file params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *WorkspaceServiceCreateWorkspaceFileParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the workspace service create workspace file params
func (o *WorkspaceServiceCreateWorkspaceFileParams) WithTimeout(timeout time.Duration) *WorkspaceServiceCreateWorkspaceFileParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the workspace service create workspace file params
func (o *WorkspaceServiceCreateWorkspaceFileParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the workspace service create workspace file params
func (o *WorkspaceServiceCreateWorkspaceFileParams) WithContext(ctx context.Context) *WorkspaceServiceCreateWorkspaceFileParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the workspace service create workspace file params
func (o *WorkspaceServiceCreateWorkspaceFileParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the workspace service create workspace file params
func (o *WorkspaceServiceCreateWorkspaceFileParams) WithHTTPClient(client *http.Client) *WorkspaceServiceCreateWorkspaceFileParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the workspace service create workspace file params
func (o *WorkspaceServiceCreateWorkspaceFileParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFile adds the file to the workspace service create workspace file params
func (o *WorkspaceServiceCreateWorkspaceFileParams) WithFile(file *models.ChorusWorkspaceFile) *WorkspaceServiceCreateWorkspaceFileParams {
	o.SetFile(file)
	return o
}

// SetFile adds the file to the workspace service create workspace file params
func (o *WorkspaceServiceCreateWorkspaceFileParams) SetFile(file *models.ChorusWorkspaceFile) {
	o.File = file
}

// WithPath adds the path to the workspace service create workspace file params
func (o *WorkspaceServiceCreateWorkspaceFileParams) WithPath(path string) *WorkspaceServiceCreateWorkspaceFileParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the workspace service create workspace file params
func (o *WorkspaceServiceCreateWorkspaceFileParams) SetPath(path string) {
	o.Path = path
}

// WithWorkspaceID adds the workspaceID to the workspace service create workspace file params
func (o *WorkspaceServiceCreateWorkspaceFileParams) WithWorkspaceID(workspaceID string) *WorkspaceServiceCreateWorkspaceFileParams {
	o.SetWorkspaceID(workspaceID)
	return o
}

// SetWorkspaceID adds the workspaceId to the workspace service create workspace file params
func (o *WorkspaceServiceCreateWorkspaceFileParams) SetWorkspaceID(workspaceID string) {
	o.WorkspaceID = workspaceID
}

// WriteToRequest writes these params to a swagger request
func (o *WorkspaceServiceCreateWorkspaceFileParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.File != nil {
		if err := r.SetBodyParam(o.File); err != nil {
			return err
		}
	}

	// path param path
	if err := r.SetPathParam("path", o.Path); err != nil {
		return err
	}

	// path param workspaceId
	if err := r.SetPathParam("workspaceId", o.WorkspaceID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
