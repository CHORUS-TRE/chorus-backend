// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChorusUser chorus user
//
// swagger:model chorusUser
type ChorusUser struct {

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// first name
	FirstName string `json:"firstName,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// last name
	LastName string `json:"lastName,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// password changed
	PasswordChanged bool `json:"passwordChanged,omitempty"`

	// roles
	Roles []string `json:"roles"`

	// roles with context
	RolesWithContext []*ChorusRole `json:"rolesWithContext"`

	// source
	Source string `json:"source,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// totp enabled
	TotpEnabled bool `json:"totpEnabled,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this chorus user
func (m *ChorusUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRolesWithContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChorusUser) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ChorusUser) validateRolesWithContext(formats strfmt.Registry) error {
	if swag.IsZero(m.RolesWithContext) { // not required
		return nil
	}

	for i := 0; i < len(m.RolesWithContext); i++ {
		if swag.IsZero(m.RolesWithContext[i]) { // not required
			continue
		}

		if m.RolesWithContext[i] != nil {
			if err := m.RolesWithContext[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rolesWithContext" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rolesWithContext" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ChorusUser) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this chorus user based on the context it is used
func (m *ChorusUser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRolesWithContext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChorusUser) contextValidateRolesWithContext(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RolesWithContext); i++ {

		if m.RolesWithContext[i] != nil {

			if swag.IsZero(m.RolesWithContext[i]) { // not required
				return nil
			}

			if err := m.RolesWithContext[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rolesWithContext" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rolesWithContext" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChorusUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChorusUser) UnmarshalBinary(b []byte) error {
	var res ChorusUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
