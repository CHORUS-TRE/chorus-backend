// Code generated by go-swagger; DO NOT EDIT.

package user_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new user service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new user service API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new user service API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for user service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	UserServiceCreateUser(params *UserServiceCreateUserParams, opts ...ClientOption) (*UserServiceCreateUserOK, error)

	UserServiceCreateUserRole(params *UserServiceCreateUserRoleParams, opts ...ClientOption) (*UserServiceCreateUserRoleOK, error)

	UserServiceDeleteUser(params *UserServiceDeleteUserParams, opts ...ClientOption) (*UserServiceDeleteUserOK, error)

	UserServiceDeleteUserRole(params *UserServiceDeleteUserRoleParams, opts ...ClientOption) (*UserServiceDeleteUserRoleOK, error)

	UserServiceEnableTotp(params *UserServiceEnableTotpParams, opts ...ClientOption) (*UserServiceEnableTotpOK, error)

	UserServiceGetUser(params *UserServiceGetUserParams, opts ...ClientOption) (*UserServiceGetUserOK, error)

	UserServiceGetUserMe(params *UserServiceGetUserMeParams, opts ...ClientOption) (*UserServiceGetUserMeOK, error)

	UserServiceListUsers(params *UserServiceListUsersParams, opts ...ClientOption) (*UserServiceListUsersOK, error)

	UserServiceResetPassword(params *UserServiceResetPasswordParams, opts ...ClientOption) (*UserServiceResetPasswordOK, error)

	UserServiceResetTotp(params *UserServiceResetTotpParams, opts ...ClientOption) (*UserServiceResetTotpOK, error)

	UserServiceUpdatePassword(params *UserServiceUpdatePasswordParams, opts ...ClientOption) (*UserServiceUpdatePasswordOK, error)

	UserServiceUpdateUser(params *UserServiceUpdateUserParams, opts ...ClientOption) (*UserServiceUpdateUserOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
UserServiceCreateUser creates a user

This endpoint creates a user
*/
func (a *Client) UserServiceCreateUser(params *UserServiceCreateUserParams, opts ...ClientOption) (*UserServiceCreateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserServiceCreateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserService_CreateUser",
		Method:             "POST",
		PathPattern:        "/api/rest/v1/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserServiceCreateUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserServiceCreateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserServiceCreateUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UserServiceCreateUserRole creates a user s role

This endpoint creates a user's role
*/
func (a *Client) UserServiceCreateUserRole(params *UserServiceCreateUserRoleParams, opts ...ClientOption) (*UserServiceCreateUserRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserServiceCreateUserRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserService_CreateUserRole",
		Method:             "POST",
		PathPattern:        "/api/rest/v1/users/{userId}/role",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserServiceCreateUserRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserServiceCreateUserRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserServiceCreateUserRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UserServiceDeleteUser deletes a user

This endpoint deletes a user
*/
func (a *Client) UserServiceDeleteUser(params *UserServiceDeleteUserParams, opts ...ClientOption) (*UserServiceDeleteUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserServiceDeleteUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserService_DeleteUser",
		Method:             "DELETE",
		PathPattern:        "/api/rest/v1/users/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserServiceDeleteUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserServiceDeleteUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserServiceDeleteUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UserServiceDeleteUserRole deletes a user s role

This endpoint deletes a user's role
*/
func (a *Client) UserServiceDeleteUserRole(params *UserServiceDeleteUserRoleParams, opts ...ClientOption) (*UserServiceDeleteUserRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserServiceDeleteUserRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserService_DeleteUserRole",
		Method:             "DELETE",
		PathPattern:        "/api/rest/v1/users/{userId}/role/{roleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserServiceDeleteUserRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserServiceDeleteUserRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserServiceDeleteUserRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UserServiceEnableTotp enables t o t p

This endpoint enables the TOTP of the authenticated user
*/
func (a *Client) UserServiceEnableTotp(params *UserServiceEnableTotpParams, opts ...ClientOption) (*UserServiceEnableTotpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserServiceEnableTotpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserService_EnableTotp",
		Method:             "POST",
		PathPattern:        "/api/rest/v1/users/me/totp/enable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserServiceEnableTotpReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserServiceEnableTotpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserServiceEnableTotpDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UserServiceGetUser gets a user

This endpoint returns a user
*/
func (a *Client) UserServiceGetUser(params *UserServiceGetUserParams, opts ...ClientOption) (*UserServiceGetUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserServiceGetUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserService_GetUser",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/users/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserServiceGetUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserServiceGetUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserServiceGetUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UserServiceGetUserMe gets my own user

This endpoint returns the details of the authenticated user
*/
func (a *Client) UserServiceGetUserMe(params *UserServiceGetUserMeParams, opts ...ClientOption) (*UserServiceGetUserMeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserServiceGetUserMeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserService_GetUserMe",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/users/me",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserServiceGetUserMeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserServiceGetUserMeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserServiceGetUserMeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UserServiceListUsers lists users

This endpoint returns a list of users
*/
func (a *Client) UserServiceListUsers(params *UserServiceListUsersParams, opts ...ClientOption) (*UserServiceListUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserServiceListUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserService_ListUsers",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserServiceListUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserServiceListUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserServiceListUsersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UserServiceResetPassword resets password

This endpoint resets a user's password
*/
func (a *Client) UserServiceResetPassword(params *UserServiceResetPasswordParams, opts ...ClientOption) (*UserServiceResetPasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserServiceResetPasswordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserService_ResetPassword",
		Method:             "POST",
		PathPattern:        "/api/rest/v1/users/{id}/password/reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserServiceResetPasswordReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserServiceResetPasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserServiceResetPasswordDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UserServiceResetTotp resets t o t p

This endpoint resets the TOTP of the authenticated user
*/
func (a *Client) UserServiceResetTotp(params *UserServiceResetTotpParams, opts ...ClientOption) (*UserServiceResetTotpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserServiceResetTotpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserService_ResetTotp",
		Method:             "POST",
		PathPattern:        "/api/rest/v1/users/me/totp/reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserServiceResetTotpReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserServiceResetTotpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserServiceResetTotpDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UserServiceUpdatePassword updates password

This endpoint updates the password of the authenticated user
*/
func (a *Client) UserServiceUpdatePassword(params *UserServiceUpdatePasswordParams, opts ...ClientOption) (*UserServiceUpdatePasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserServiceUpdatePasswordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserService_UpdatePassword",
		Method:             "PUT",
		PathPattern:        "/api/rest/v1/users/me/password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserServiceUpdatePasswordReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserServiceUpdatePasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserServiceUpdatePasswordDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UserServiceUpdateUser updates a user

This endpoint updates a user
*/
func (a *Client) UserServiceUpdateUser(params *UserServiceUpdateUserParams, opts ...ClientOption) (*UserServiceUpdateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserServiceUpdateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UserService_UpdateUser",
		Method:             "PUT",
		PathPattern:        "/api/rest/v1/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserServiceUpdateUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserServiceUpdateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UserServiceUpdateUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
