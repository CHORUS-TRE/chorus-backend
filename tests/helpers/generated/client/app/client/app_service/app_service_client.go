// Code generated by go-swagger; DO NOT EDIT.

package app_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new app service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new app service API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new app service API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for app service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AppServiceBulkCreateApps(params *AppServiceBulkCreateAppsParams, opts ...ClientOption) (*AppServiceBulkCreateAppsOK, error)

	AppServiceCreateApp(params *AppServiceCreateAppParams, opts ...ClientOption) (*AppServiceCreateAppOK, error)

	AppServiceDeleteApp(params *AppServiceDeleteAppParams, opts ...ClientOption) (*AppServiceDeleteAppOK, error)

	AppServiceGetApp(params *AppServiceGetAppParams, opts ...ClientOption) (*AppServiceGetAppOK, error)

	AppServiceListApps(params *AppServiceListAppsParams, opts ...ClientOption) (*AppServiceListAppsOK, error)

	AppServiceUpdateApp(params *AppServiceUpdateAppParams, opts ...ClientOption) (*AppServiceUpdateAppOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AppServiceBulkCreateApps creates multiple apps

This endpoint creates multiple apps
*/
func (a *Client) AppServiceBulkCreateApps(params *AppServiceBulkCreateAppsParams, opts ...ClientOption) (*AppServiceBulkCreateAppsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppServiceBulkCreateAppsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppService_BulkCreateApps",
		Method:             "POST",
		PathPattern:        "/api/rest/v1/apps/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AppServiceBulkCreateAppsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppServiceBulkCreateAppsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppServiceBulkCreateAppsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AppServiceCreateApp creates an app

This endpoint creates an app
*/
func (a *Client) AppServiceCreateApp(params *AppServiceCreateAppParams, opts ...ClientOption) (*AppServiceCreateAppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppServiceCreateAppParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppService_CreateApp",
		Method:             "POST",
		PathPattern:        "/api/rest/v1/apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AppServiceCreateAppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppServiceCreateAppOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppServiceCreateAppDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AppServiceDeleteApp deletes an app

This endpoint deletes an app
*/
func (a *Client) AppServiceDeleteApp(params *AppServiceDeleteAppParams, opts ...ClientOption) (*AppServiceDeleteAppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppServiceDeleteAppParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppService_DeleteApp",
		Method:             "DELETE",
		PathPattern:        "/api/rest/v1/apps/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AppServiceDeleteAppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppServiceDeleteAppOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppServiceDeleteAppDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AppServiceGetApp gets an app

This endpoint returns an app
*/
func (a *Client) AppServiceGetApp(params *AppServiceGetAppParams, opts ...ClientOption) (*AppServiceGetAppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppServiceGetAppParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppService_GetApp",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/apps/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AppServiceGetAppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppServiceGetAppOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppServiceGetAppDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AppServiceListApps lists apps

This endpoint returns a list of apps
*/
func (a *Client) AppServiceListApps(params *AppServiceListAppsParams, opts ...ClientOption) (*AppServiceListAppsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppServiceListAppsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppService_ListApps",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AppServiceListAppsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppServiceListAppsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppServiceListAppsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AppServiceUpdateApp updates an app

This endpoint updates an app
*/
func (a *Client) AppServiceUpdateApp(params *AppServiceUpdateAppParams, opts ...ClientOption) (*AppServiceUpdateAppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppServiceUpdateAppParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppService_UpdateApp",
		Method:             "PUT",
		PathPattern:        "/api/rest/v1/apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AppServiceUpdateAppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppServiceUpdateAppOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppServiceUpdateAppDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
