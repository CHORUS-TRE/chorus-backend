// Code generated by go-swagger; DO NOT EDIT.

package attachments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/CHORUS-TRE/chorus-backend/tests/helpers/generated/client/attachment/models"
)

// AttachmentServiceGetAttachmentReader is a Reader for the AttachmentServiceGetAttachment structure.
type AttachmentServiceGetAttachmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AttachmentServiceGetAttachmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAttachmentServiceGetAttachmentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewAttachmentServiceGetAttachmentDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAttachmentServiceGetAttachmentOK creates a AttachmentServiceGetAttachmentOK with default headers values
func NewAttachmentServiceGetAttachmentOK() *AttachmentServiceGetAttachmentOK {
	return &AttachmentServiceGetAttachmentOK{}
}

/*
AttachmentServiceGetAttachmentOK describes a response with status code 200, with default header values.

A successful response.
*/
type AttachmentServiceGetAttachmentOK struct {
	Payload *models.ChorusGetAttachmentReply
}

// IsSuccess returns true when this attachment service get attachment o k response has a 2xx status code
func (o *AttachmentServiceGetAttachmentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this attachment service get attachment o k response has a 3xx status code
func (o *AttachmentServiceGetAttachmentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attachment service get attachment o k response has a 4xx status code
func (o *AttachmentServiceGetAttachmentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this attachment service get attachment o k response has a 5xx status code
func (o *AttachmentServiceGetAttachmentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this attachment service get attachment o k response a status code equal to that given
func (o *AttachmentServiceGetAttachmentOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the attachment service get attachment o k response
func (o *AttachmentServiceGetAttachmentOK) Code() int {
	return 200
}

func (o *AttachmentServiceGetAttachmentOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/rest/v1/attachments/{id}][%d] attachmentServiceGetAttachmentOK %s", 200, payload)
}

func (o *AttachmentServiceGetAttachmentOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/rest/v1/attachments/{id}][%d] attachmentServiceGetAttachmentOK %s", 200, payload)
}

func (o *AttachmentServiceGetAttachmentOK) GetPayload() *models.ChorusGetAttachmentReply {
	return o.Payload
}

func (o *AttachmentServiceGetAttachmentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ChorusGetAttachmentReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachmentServiceGetAttachmentDefault creates a AttachmentServiceGetAttachmentDefault with default headers values
func NewAttachmentServiceGetAttachmentDefault(code int) *AttachmentServiceGetAttachmentDefault {
	return &AttachmentServiceGetAttachmentDefault{
		_statusCode: code,
	}
}

/*
AttachmentServiceGetAttachmentDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type AttachmentServiceGetAttachmentDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this attachment service get attachment default response has a 2xx status code
func (o *AttachmentServiceGetAttachmentDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this attachment service get attachment default response has a 3xx status code
func (o *AttachmentServiceGetAttachmentDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this attachment service get attachment default response has a 4xx status code
func (o *AttachmentServiceGetAttachmentDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this attachment service get attachment default response has a 5xx status code
func (o *AttachmentServiceGetAttachmentDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this attachment service get attachment default response a status code equal to that given
func (o *AttachmentServiceGetAttachmentDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the attachment service get attachment default response
func (o *AttachmentServiceGetAttachmentDefault) Code() int {
	return o._statusCode
}

func (o *AttachmentServiceGetAttachmentDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/rest/v1/attachments/{id}][%d] AttachmentService_GetAttachment default %s", o._statusCode, payload)
}

func (o *AttachmentServiceGetAttachmentDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/rest/v1/attachments/{id}][%d] AttachmentService_GetAttachment default %s", o._statusCode, payload)
}

func (o *AttachmentServiceGetAttachmentDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *AttachmentServiceGetAttachmentDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
