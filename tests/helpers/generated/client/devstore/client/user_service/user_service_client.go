// Code generated by go-swagger; DO NOT EDIT.

package user_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new user service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new user service API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new user service API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for user service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DevstoreServiceDeleteUserEntry(params *DevstoreServiceDeleteUserEntryParams, opts ...ClientOption) (*DevstoreServiceDeleteUserEntryOK, error)

	DevstoreServiceGetUserEntry(params *DevstoreServiceGetUserEntryParams, opts ...ClientOption) (*DevstoreServiceGetUserEntryOK, error)

	DevstoreServiceListUserEntries(params *DevstoreServiceListUserEntriesParams, opts ...ClientOption) (*DevstoreServiceListUserEntriesOK, error)

	DevstoreServicePutUserEntry(params *DevstoreServicePutUserEntryParams, opts ...ClientOption) (*DevstoreServicePutUserEntryOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DevstoreServiceDeleteUserEntry deletes a key value entry from the user store

This endpoint deletes a key/value entry from the user store by key
*/
func (a *Client) DevstoreServiceDeleteUserEntry(params *DevstoreServiceDeleteUserEntryParams, opts ...ClientOption) (*DevstoreServiceDeleteUserEntryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevstoreServiceDeleteUserEntryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DevstoreService_DeleteUserEntry",
		Method:             "DELETE",
		PathPattern:        "/api/rest/v1/devstore/user/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DevstoreServiceDeleteUserEntryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevstoreServiceDeleteUserEntryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DevstoreServiceDeleteUserEntryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DevstoreServiceGetUserEntry gets a key value entry from the user store

This endpoint retrieves a key/value entry from the user store by key
*/
func (a *Client) DevstoreServiceGetUserEntry(params *DevstoreServiceGetUserEntryParams, opts ...ClientOption) (*DevstoreServiceGetUserEntryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevstoreServiceGetUserEntryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DevstoreService_GetUserEntry",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/devstore/user/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DevstoreServiceGetUserEntryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevstoreServiceGetUserEntryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DevstoreServiceGetUserEntryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DevstoreServiceListUserEntries lists all key value entries in the user store

This endpoint retrieves all key/value entries from the user store
*/
func (a *Client) DevstoreServiceListUserEntries(params *DevstoreServiceListUserEntriesParams, opts ...ClientOption) (*DevstoreServiceListUserEntriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevstoreServiceListUserEntriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DevstoreService_ListUserEntries",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/devstore/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DevstoreServiceListUserEntriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevstoreServiceListUserEntriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DevstoreServiceListUserEntriesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DevstoreServicePutUserEntry puts a key value entry in the dev user store

This endpoint allows to put a key/value entry in the dev user store
*/
func (a *Client) DevstoreServicePutUserEntry(params *DevstoreServicePutUserEntryParams, opts ...ClientOption) (*DevstoreServicePutUserEntryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevstoreServicePutUserEntryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DevstoreService_PutUserEntry",
		Method:             "POST",
		PathPattern:        "/api/rest/v1/devstore/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DevstoreServicePutUserEntryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevstoreServicePutUserEntryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DevstoreServicePutUserEntryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
