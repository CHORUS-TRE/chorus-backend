// Code generated by go-swagger; DO NOT EDIT.

package global_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new global service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new global service API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new global service API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for global service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DevstoreServiceDeleteGlobalEntry(params *DevstoreServiceDeleteGlobalEntryParams, opts ...ClientOption) (*DevstoreServiceDeleteGlobalEntryOK, error)

	DevstoreServiceGetGlobalEntry(params *DevstoreServiceGetGlobalEntryParams, opts ...ClientOption) (*DevstoreServiceGetGlobalEntryOK, error)

	DevstoreServiceListGlobalEntries(params *DevstoreServiceListGlobalEntriesParams, opts ...ClientOption) (*DevstoreServiceListGlobalEntriesOK, error)

	DevstoreServicePutGlobalEntry(params *DevstoreServicePutGlobalEntryParams, opts ...ClientOption) (*DevstoreServicePutGlobalEntryOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DevstoreServiceDeleteGlobalEntry deletes a key value entry from the global store

This endpoint deletes a key/value entry from the global store by key
*/
func (a *Client) DevstoreServiceDeleteGlobalEntry(params *DevstoreServiceDeleteGlobalEntryParams, opts ...ClientOption) (*DevstoreServiceDeleteGlobalEntryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevstoreServiceDeleteGlobalEntryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DevstoreService_DeleteGlobalEntry",
		Method:             "DELETE",
		PathPattern:        "/api/rest/v1/devstore/global/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DevstoreServiceDeleteGlobalEntryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevstoreServiceDeleteGlobalEntryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DevstoreServiceDeleteGlobalEntryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DevstoreServiceGetGlobalEntry gets a key value entry from the global store

This endpoint retrieves a key/value entry from the global store by key
*/
func (a *Client) DevstoreServiceGetGlobalEntry(params *DevstoreServiceGetGlobalEntryParams, opts ...ClientOption) (*DevstoreServiceGetGlobalEntryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevstoreServiceGetGlobalEntryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DevstoreService_GetGlobalEntry",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/devstore/global/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DevstoreServiceGetGlobalEntryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevstoreServiceGetGlobalEntryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DevstoreServiceGetGlobalEntryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DevstoreServiceListGlobalEntries lists all key value entries in the global store

This endpoint retrieves all key/value entries from the global store
*/
func (a *Client) DevstoreServiceListGlobalEntries(params *DevstoreServiceListGlobalEntriesParams, opts ...ClientOption) (*DevstoreServiceListGlobalEntriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevstoreServiceListGlobalEntriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DevstoreService_ListGlobalEntries",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/devstore/global",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DevstoreServiceListGlobalEntriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevstoreServiceListGlobalEntriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DevstoreServiceListGlobalEntriesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DevstoreServicePutGlobalEntry puts a key value entry in the dev global store

This endpoint allows to put a key/value entry in the dev global store
*/
func (a *Client) DevstoreServicePutGlobalEntry(params *DevstoreServicePutGlobalEntryParams, opts ...ClientOption) (*DevstoreServicePutGlobalEntryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevstoreServicePutGlobalEntryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DevstoreService_PutGlobalEntry",
		Method:             "POST",
		PathPattern:        "/api/rest/v1/devstore/global",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DevstoreServicePutGlobalEntryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevstoreServicePutGlobalEntryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DevstoreServicePutGlobalEntryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
