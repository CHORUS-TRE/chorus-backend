// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v6.30.2
// source: workbench-service.proto

package chorus

import (
	context "context"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListWorkbenchsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *PaginationQuery `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Filter     *WorkbenchFilter `protobuf:"bytes,2,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
}

func (x *ListWorkbenchsRequest) Reset() {
	*x = ListWorkbenchsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkbenchsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkbenchsRequest) ProtoMessage() {}

func (x *ListWorkbenchsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkbenchsRequest.ProtoReflect.Descriptor instead.
func (*ListWorkbenchsRequest) Descriptor() ([]byte, []int) {
	return file_workbench_service_proto_rawDescGZIP(), []int{0}
}

func (x *ListWorkbenchsRequest) GetPagination() *PaginationQuery {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListWorkbenchsRequest) GetFilter() *WorkbenchFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListWorkbenchsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result     *ListWorkbenchsResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Pagination *PaginationResult     `protobuf:"bytes,2,opt,name=pagination,proto3,oneof" json:"pagination,omitempty"`
}

func (x *ListWorkbenchsReply) Reset() {
	*x = ListWorkbenchsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkbenchsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkbenchsReply) ProtoMessage() {}

func (x *ListWorkbenchsReply) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkbenchsReply.ProtoReflect.Descriptor instead.
func (*ListWorkbenchsReply) Descriptor() ([]byte, []int) {
	return file_workbench_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListWorkbenchsReply) GetResult() *ListWorkbenchsResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ListWorkbenchsReply) GetPagination() *PaginationResult {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ListWorkbenchsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workbenchs []*Workbench `protobuf:"bytes,1,rep,name=workbenchs,proto3" json:"workbenchs,omitempty"`
}

func (x *ListWorkbenchsResult) Reset() {
	*x = ListWorkbenchsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkbenchsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkbenchsResult) ProtoMessage() {}

func (x *ListWorkbenchsResult) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkbenchsResult.ProtoReflect.Descriptor instead.
func (*ListWorkbenchsResult) Descriptor() ([]byte, []int) {
	return file_workbench_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListWorkbenchsResult) GetWorkbenchs() []*Workbench {
	if x != nil {
		return x.Workbenchs
	}
	return nil
}

type WorkbenchFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkspaceIdsIn []uint64 `protobuf:"varint,1,rep,packed,name=workspace_ids_in,json=workspaceIdsIn,proto3" json:"workspace_ids_in,omitempty"`
}

func (x *WorkbenchFilter) Reset() {
	*x = WorkbenchFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkbenchFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkbenchFilter) ProtoMessage() {}

func (x *WorkbenchFilter) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkbenchFilter.ProtoReflect.Descriptor instead.
func (*WorkbenchFilter) Descriptor() ([]byte, []int) {
	return file_workbench_service_proto_rawDescGZIP(), []int{3}
}

func (x *WorkbenchFilter) GetWorkspaceIdsIn() []uint64 {
	if x != nil {
		return x.WorkspaceIdsIn
	}
	return nil
}

type GetWorkbenchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetWorkbenchRequest) Reset() {
	*x = GetWorkbenchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkbenchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkbenchRequest) ProtoMessage() {}

func (x *GetWorkbenchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkbenchRequest.ProtoReflect.Descriptor instead.
func (*GetWorkbenchRequest) Descriptor() ([]byte, []int) {
	return file_workbench_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetWorkbenchRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetWorkbenchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *GetWorkbenchResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *GetWorkbenchReply) Reset() {
	*x = GetWorkbenchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkbenchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkbenchReply) ProtoMessage() {}

func (x *GetWorkbenchReply) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkbenchReply.ProtoReflect.Descriptor instead.
func (*GetWorkbenchReply) Descriptor() ([]byte, []int) {
	return file_workbench_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetWorkbenchReply) GetResult() *GetWorkbenchResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetWorkbenchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workbench *Workbench `protobuf:"bytes,1,opt,name=workbench,proto3" json:"workbench,omitempty"`
}

func (x *GetWorkbenchResult) Reset() {
	*x = GetWorkbenchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkbenchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkbenchResult) ProtoMessage() {}

func (x *GetWorkbenchResult) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkbenchResult.ProtoReflect.Descriptor instead.
func (*GetWorkbenchResult) Descriptor() ([]byte, []int) {
	return file_workbench_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetWorkbenchResult) GetWorkbench() *Workbench {
	if x != nil {
		return x.Workbench
	}
	return nil
}

type CreateWorkbenchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CreateWorkbenchResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateWorkbenchReply) Reset() {
	*x = CreateWorkbenchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWorkbenchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWorkbenchReply) ProtoMessage() {}

func (x *CreateWorkbenchReply) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWorkbenchReply.ProtoReflect.Descriptor instead.
func (*CreateWorkbenchReply) Descriptor() ([]byte, []int) {
	return file_workbench_service_proto_rawDescGZIP(), []int{7}
}

func (x *CreateWorkbenchReply) GetResult() *CreateWorkbenchResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type CreateWorkbenchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workbench *Workbench `protobuf:"bytes,1,opt,name=workbench,proto3" json:"workbench,omitempty"`
}

func (x *CreateWorkbenchResult) Reset() {
	*x = CreateWorkbenchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWorkbenchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWorkbenchResult) ProtoMessage() {}

func (x *CreateWorkbenchResult) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWorkbenchResult.ProtoReflect.Descriptor instead.
func (*CreateWorkbenchResult) Descriptor() ([]byte, []int) {
	return file_workbench_service_proto_rawDescGZIP(), []int{8}
}

func (x *CreateWorkbenchResult) GetWorkbench() *Workbench {
	if x != nil {
		return x.Workbench
	}
	return nil
}

type UpdateWorkbenchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *UpdateWorkbenchResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *UpdateWorkbenchReply) Reset() {
	*x = UpdateWorkbenchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkbenchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkbenchReply) ProtoMessage() {}

func (x *UpdateWorkbenchReply) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkbenchReply.ProtoReflect.Descriptor instead.
func (*UpdateWorkbenchReply) Descriptor() ([]byte, []int) {
	return file_workbench_service_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateWorkbenchReply) GetResult() *UpdateWorkbenchResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type UpdateWorkbenchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workbench *Workbench `protobuf:"bytes,1,opt,name=workbench,proto3" json:"workbench,omitempty"`
}

func (x *UpdateWorkbenchResult) Reset() {
	*x = UpdateWorkbenchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkbenchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkbenchResult) ProtoMessage() {}

func (x *UpdateWorkbenchResult) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkbenchResult.ProtoReflect.Descriptor instead.
func (*UpdateWorkbenchResult) Descriptor() ([]byte, []int) {
	return file_workbench_service_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateWorkbenchResult) GetWorkbench() *Workbench {
	if x != nil {
		return x.Workbench
	}
	return nil
}

type InviteInWorkbenchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId uint64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Role   *Role  `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *InviteInWorkbenchRequest) Reset() {
	*x = InviteInWorkbenchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteInWorkbenchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteInWorkbenchRequest) ProtoMessage() {}

func (x *InviteInWorkbenchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteInWorkbenchRequest.ProtoReflect.Descriptor instead.
func (*InviteInWorkbenchRequest) Descriptor() ([]byte, []int) {
	return file_workbench_service_proto_rawDescGZIP(), []int{11}
}

func (x *InviteInWorkbenchRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InviteInWorkbenchRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *InviteInWorkbenchRequest) GetRole() *Role {
	if x != nil {
		return x.Role
	}
	return nil
}

type InviteInWorkbenchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *InviteInWorkbenchResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *InviteInWorkbenchReply) Reset() {
	*x = InviteInWorkbenchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteInWorkbenchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteInWorkbenchReply) ProtoMessage() {}

func (x *InviteInWorkbenchReply) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteInWorkbenchReply.ProtoReflect.Descriptor instead.
func (*InviteInWorkbenchReply) Descriptor() ([]byte, []int) {
	return file_workbench_service_proto_rawDescGZIP(), []int{12}
}

func (x *InviteInWorkbenchReply) GetResult() *InviteInWorkbenchResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type InviteInWorkbenchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workbench *Workbench `protobuf:"bytes,1,opt,name=workbench,proto3" json:"workbench,omitempty"`
}

func (x *InviteInWorkbenchResult) Reset() {
	*x = InviteInWorkbenchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteInWorkbenchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteInWorkbenchResult) ProtoMessage() {}

func (x *InviteInWorkbenchResult) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteInWorkbenchResult.ProtoReflect.Descriptor instead.
func (*InviteInWorkbenchResult) Descriptor() ([]byte, []int) {
	return file_workbench_service_proto_rawDescGZIP(), []int{13}
}

func (x *InviteInWorkbenchResult) GetWorkbench() *Workbench {
	if x != nil {
		return x.Workbench
	}
	return nil
}

type ManageUserRoleInWorkbenchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId uint64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Role   *Role  `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *ManageUserRoleInWorkbenchRequest) Reset() {
	*x = ManageUserRoleInWorkbenchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManageUserRoleInWorkbenchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManageUserRoleInWorkbenchRequest) ProtoMessage() {}

func (x *ManageUserRoleInWorkbenchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManageUserRoleInWorkbenchRequest.ProtoReflect.Descriptor instead.
func (*ManageUserRoleInWorkbenchRequest) Descriptor() ([]byte, []int) {
	return file_workbench_service_proto_rawDescGZIP(), []int{14}
}

func (x *ManageUserRoleInWorkbenchRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ManageUserRoleInWorkbenchRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ManageUserRoleInWorkbenchRequest) GetRole() *Role {
	if x != nil {
		return x.Role
	}
	return nil
}

type ManageUserRoleInWorkbenchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *ManageUserRoleInWorkbenchResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ManageUserRoleInWorkbenchReply) Reset() {
	*x = ManageUserRoleInWorkbenchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManageUserRoleInWorkbenchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManageUserRoleInWorkbenchReply) ProtoMessage() {}

func (x *ManageUserRoleInWorkbenchReply) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManageUserRoleInWorkbenchReply.ProtoReflect.Descriptor instead.
func (*ManageUserRoleInWorkbenchReply) Descriptor() ([]byte, []int) {
	return file_workbench_service_proto_rawDescGZIP(), []int{15}
}

func (x *ManageUserRoleInWorkbenchReply) GetResult() *ManageUserRoleInWorkbenchResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type ManageUserRoleInWorkbenchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workbench *Workbench `protobuf:"bytes,1,opt,name=workbench,proto3" json:"workbench,omitempty"`
}

func (x *ManageUserRoleInWorkbenchResult) Reset() {
	*x = ManageUserRoleInWorkbenchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManageUserRoleInWorkbenchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManageUserRoleInWorkbenchResult) ProtoMessage() {}

func (x *ManageUserRoleInWorkbenchResult) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManageUserRoleInWorkbenchResult.ProtoReflect.Descriptor instead.
func (*ManageUserRoleInWorkbenchResult) Descriptor() ([]byte, []int) {
	return file_workbench_service_proto_rawDescGZIP(), []int{16}
}

func (x *ManageUserRoleInWorkbenchResult) GetWorkbench() *Workbench {
	if x != nil {
		return x.Workbench
	}
	return nil
}

type RemoveUserFromWorkbenchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId uint64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *RemoveUserFromWorkbenchRequest) Reset() {
	*x = RemoveUserFromWorkbenchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveUserFromWorkbenchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUserFromWorkbenchRequest) ProtoMessage() {}

func (x *RemoveUserFromWorkbenchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUserFromWorkbenchRequest.ProtoReflect.Descriptor instead.
func (*RemoveUserFromWorkbenchRequest) Descriptor() ([]byte, []int) {
	return file_workbench_service_proto_rawDescGZIP(), []int{17}
}

func (x *RemoveUserFromWorkbenchRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RemoveUserFromWorkbenchRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type RemoveUserFromWorkbenchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *RemoveUserFromWorkbenchResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RemoveUserFromWorkbenchReply) Reset() {
	*x = RemoveUserFromWorkbenchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveUserFromWorkbenchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUserFromWorkbenchReply) ProtoMessage() {}

func (x *RemoveUserFromWorkbenchReply) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUserFromWorkbenchReply.ProtoReflect.Descriptor instead.
func (*RemoveUserFromWorkbenchReply) Descriptor() ([]byte, []int) {
	return file_workbench_service_proto_rawDescGZIP(), []int{18}
}

func (x *RemoveUserFromWorkbenchReply) GetResult() *RemoveUserFromWorkbenchResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type RemoveUserFromWorkbenchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workbench *Workbench `protobuf:"bytes,1,opt,name=workbench,proto3" json:"workbench,omitempty"`
}

func (x *RemoveUserFromWorkbenchResult) Reset() {
	*x = RemoveUserFromWorkbenchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveUserFromWorkbenchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUserFromWorkbenchResult) ProtoMessage() {}

func (x *RemoveUserFromWorkbenchResult) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUserFromWorkbenchResult.ProtoReflect.Descriptor instead.
func (*RemoveUserFromWorkbenchResult) Descriptor() ([]byte, []int) {
	return file_workbench_service_proto_rawDescGZIP(), []int{19}
}

func (x *RemoveUserFromWorkbenchResult) GetWorkbench() *Workbench {
	if x != nil {
		return x.Workbench
	}
	return nil
}

type DeleteWorkbenchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteWorkbenchRequest) Reset() {
	*x = DeleteWorkbenchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWorkbenchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkbenchRequest) ProtoMessage() {}

func (x *DeleteWorkbenchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkbenchRequest.ProtoReflect.Descriptor instead.
func (*DeleteWorkbenchRequest) Descriptor() ([]byte, []int) {
	return file_workbench_service_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteWorkbenchRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteWorkbenchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *DeleteWorkbenchResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DeleteWorkbenchReply) Reset() {
	*x = DeleteWorkbenchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWorkbenchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkbenchReply) ProtoMessage() {}

func (x *DeleteWorkbenchReply) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkbenchReply.ProtoReflect.Descriptor instead.
func (*DeleteWorkbenchReply) Descriptor() ([]byte, []int) {
	return file_workbench_service_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteWorkbenchReply) GetResult() *DeleteWorkbenchResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type DeleteWorkbenchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteWorkbenchResult) Reset() {
	*x = DeleteWorkbenchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWorkbenchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkbenchResult) ProtoMessage() {}

func (x *DeleteWorkbenchResult) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkbenchResult.ProtoReflect.Descriptor instead.
func (*DeleteWorkbenchResult) Descriptor() ([]byte, []int) {
	return file_workbench_service_proto_rawDescGZIP(), []int{22}
}

var File_workbench_service_proto protoreflect.FileDescriptor

var file_workbench_service_proto_rawDesc = []byte{
	0x0a, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63, 0x68, 0x6f, 0x72, 0x75,
	0x73, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x77, 0x6f, 0x72, 0x6b,
	0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x6f,
	0x72, 0x75, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x99, 0x01, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x31, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x73, 0x22, 0x3b, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x73, 0x49, 0x6e, 0x22,
	0x25, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x47, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x32, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68,
	0x6f, 0x72, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x45, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75,
	0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x09, 0x77, 0x6f, 0x72,
	0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x22, 0x4d, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x35,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x48, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f,
	0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x62,
	0x65, 0x6e, 0x63, 0x68, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x22,
	0x4d, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x48,
	0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x62,
	0x65, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x68, 0x6f,
	0x72, 0x75, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x09, 0x77,
	0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x22, 0x64, 0x0a, 0x18, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x49, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x68, 0x6f,
	0x72, 0x75, 0x73, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x51,
	0x0a, 0x16, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75,
	0x73, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x4a, 0x0a, 0x17, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x57, 0x6f, 0x72,
	0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x09,
	0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x22, 0x6c, 0x0a,
	0x20, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x49,
	0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x61, 0x0a, 0x1e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x57,
	0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3f, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x52,
	0x0a, 0x1f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x49, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x2f, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x22, 0x48, 0x0a, 0x1e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x46, 0x72, 0x6f, 0x6d, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x1c,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x6f,
	0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3d, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63,
	0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x46, 0x72, 0x6f, 0x6d, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x50, 0x0a, 0x1d, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x6f, 0x72,
	0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x09,
	0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x22, 0x28, 0x0a,
	0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x35, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32,
	0xc1, 0x0d, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0xb5, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x62, 0x65, 0x6e, 0x63, 0x68, 0x12, 0x1b, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x6d, 0x92,
	0x41, 0x46, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x0f, 0x47, 0x65, 0x74, 0x20, 0x61, 0x20, 0x77, 0x6f, 0x72, 0x6b,
	0x62, 0x65, 0x6e, 0x63, 0x68, 0x1a, 0x21, 0x54, 0x68, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x77,
	0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xbf, 0x01, 0x0a,
	0x0e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x73, 0x12,
	0x1d, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x62, 0x65, 0x6e, 0x63, 0x68, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x71, 0x92, 0x41, 0x4f,
	0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x73, 0x1a, 0x2a, 0x54, 0x68, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x73, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x74,
	0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x73, 0x12, 0xb2,
	0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x12, 0x11, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x62, 0x65, 0x6e, 0x63, 0x68, 0x1a, 0x1c, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x6e, 0x92, 0x41, 0x49, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x20, 0x61, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x1a, 0x21,
	0x54, 0x68, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x72, 0x65, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x73, 0x12, 0xb2, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x12, 0x11, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x1a, 0x1c, 0x2e, 0x63, 0x68, 0x6f,
	0x72, 0x75, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x6e, 0x92, 0x41, 0x49, 0x0a, 0x10, 0x57,
	0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x1a, 0x21, 0x54, 0x68, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x77, 0x6f, 0x72,
	0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x1a,
	0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x73, 0x12, 0xe6, 0x01, 0x0a, 0x11, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x49, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x12, 0x20,
	0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6e,
	0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x49, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x8e, 0x01, 0x92, 0x41, 0x5d, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x77, 0x6f, 0x72,
	0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x1a, 0x2b, 0x54, 0x68, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x1a, 0x23, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x62,
	0x65, 0x6e, 0x63, 0x68, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x12, 0x98, 0x02, 0x0a, 0x19, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x12,
	0x28, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x68, 0x6f, 0x72,
	0x75, 0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x49, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0xa8, 0x01, 0x92, 0x41, 0x6b, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x23, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x27, 0x73, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20,
	0x69, 0x6e, 0x20, 0x61, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x1a, 0x32,
	0x54, 0x68, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x73, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x27, 0x73, 0x20, 0x72,
	0x6f, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a, 0x22, 0x2f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x80, 0x02, 0x0a,
	0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x57,
	0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x12, 0x26, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75,
	0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d,
	0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x96, 0x01, 0x92, 0x41, 0x61, 0x0a, 0x10, 0x57, 0x6f,
	0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x66, 0x72,
	0x6f, 0x6d, 0x20, 0x61, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x1a, 0x2d,
	0x54, 0x68, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x73, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x66, 0x72, 0x6f,
	0x6d, 0x20, 0x61, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2c, 0x2a, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x2f, 0x76,
	0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x12,
	0xc1, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x12, 0x1e, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x70, 0x92, 0x41, 0x49, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x20, 0x61, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x1a, 0x21, 0x54, 0x68,
	0x69, 0x73, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x2a, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x74,
	0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x42, 0xb3, 0x01, 0x92, 0x41, 0xa5, 0x01, 0x12, 0x7c, 0x0a, 0x18, 0x63, 0x68,
	0x6f, 0x72, 0x75, 0x73, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x20, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x5b, 0x0a, 0x18, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73,
	0x20, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x48, 0x4f, 0x52, 0x55, 0x53, 0x2d, 0x54, 0x52,
	0x45, 0x2f, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x1a, 0x11, 0x64, 0x65, 0x76, 0x40, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2d, 0x74, 0x72, 0x65,
	0x2e, 0x63, 0x68, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x01, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a,
	0x08, 0x2e, 0x3b, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_workbench_service_proto_rawDescOnce sync.Once
	file_workbench_service_proto_rawDescData = file_workbench_service_proto_rawDesc
)

func file_workbench_service_proto_rawDescGZIP() []byte {
	file_workbench_service_proto_rawDescOnce.Do(func() {
		file_workbench_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_workbench_service_proto_rawDescData)
	})
	return file_workbench_service_proto_rawDescData
}

var file_workbench_service_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_workbench_service_proto_goTypes = []interface{}{
	(*ListWorkbenchsRequest)(nil),            // 0: chorus.ListWorkbenchsRequest
	(*ListWorkbenchsReply)(nil),              // 1: chorus.ListWorkbenchsReply
	(*ListWorkbenchsResult)(nil),             // 2: chorus.ListWorkbenchsResult
	(*WorkbenchFilter)(nil),                  // 3: chorus.WorkbenchFilter
	(*GetWorkbenchRequest)(nil),              // 4: chorus.GetWorkbenchRequest
	(*GetWorkbenchReply)(nil),                // 5: chorus.GetWorkbenchReply
	(*GetWorkbenchResult)(nil),               // 6: chorus.GetWorkbenchResult
	(*CreateWorkbenchReply)(nil),             // 7: chorus.CreateWorkbenchReply
	(*CreateWorkbenchResult)(nil),            // 8: chorus.CreateWorkbenchResult
	(*UpdateWorkbenchReply)(nil),             // 9: chorus.UpdateWorkbenchReply
	(*UpdateWorkbenchResult)(nil),            // 10: chorus.UpdateWorkbenchResult
	(*InviteInWorkbenchRequest)(nil),         // 11: chorus.InviteInWorkbenchRequest
	(*InviteInWorkbenchReply)(nil),           // 12: chorus.InviteInWorkbenchReply
	(*InviteInWorkbenchResult)(nil),          // 13: chorus.InviteInWorkbenchResult
	(*ManageUserRoleInWorkbenchRequest)(nil), // 14: chorus.ManageUserRoleInWorkbenchRequest
	(*ManageUserRoleInWorkbenchReply)(nil),   // 15: chorus.ManageUserRoleInWorkbenchReply
	(*ManageUserRoleInWorkbenchResult)(nil),  // 16: chorus.ManageUserRoleInWorkbenchResult
	(*RemoveUserFromWorkbenchRequest)(nil),   // 17: chorus.RemoveUserFromWorkbenchRequest
	(*RemoveUserFromWorkbenchReply)(nil),     // 18: chorus.RemoveUserFromWorkbenchReply
	(*RemoveUserFromWorkbenchResult)(nil),    // 19: chorus.RemoveUserFromWorkbenchResult
	(*DeleteWorkbenchRequest)(nil),           // 20: chorus.DeleteWorkbenchRequest
	(*DeleteWorkbenchReply)(nil),             // 21: chorus.DeleteWorkbenchReply
	(*DeleteWorkbenchResult)(nil),            // 22: chorus.DeleteWorkbenchResult
	(*PaginationQuery)(nil),                  // 23: chorus.PaginationQuery
	(*PaginationResult)(nil),                 // 24: chorus.PaginationResult
	(*Workbench)(nil),                        // 25: chorus.Workbench
	(*Role)(nil),                             // 26: chorus.Role
}
var file_workbench_service_proto_depIdxs = []int32{
	23, // 0: chorus.ListWorkbenchsRequest.pagination:type_name -> chorus.PaginationQuery
	3,  // 1: chorus.ListWorkbenchsRequest.filter:type_name -> chorus.WorkbenchFilter
	2,  // 2: chorus.ListWorkbenchsReply.result:type_name -> chorus.ListWorkbenchsResult
	24, // 3: chorus.ListWorkbenchsReply.pagination:type_name -> chorus.PaginationResult
	25, // 4: chorus.ListWorkbenchsResult.workbenchs:type_name -> chorus.Workbench
	6,  // 5: chorus.GetWorkbenchReply.result:type_name -> chorus.GetWorkbenchResult
	25, // 6: chorus.GetWorkbenchResult.workbench:type_name -> chorus.Workbench
	8,  // 7: chorus.CreateWorkbenchReply.result:type_name -> chorus.CreateWorkbenchResult
	25, // 8: chorus.CreateWorkbenchResult.workbench:type_name -> chorus.Workbench
	10, // 9: chorus.UpdateWorkbenchReply.result:type_name -> chorus.UpdateWorkbenchResult
	25, // 10: chorus.UpdateWorkbenchResult.workbench:type_name -> chorus.Workbench
	26, // 11: chorus.InviteInWorkbenchRequest.role:type_name -> chorus.Role
	13, // 12: chorus.InviteInWorkbenchReply.result:type_name -> chorus.InviteInWorkbenchResult
	25, // 13: chorus.InviteInWorkbenchResult.workbench:type_name -> chorus.Workbench
	26, // 14: chorus.ManageUserRoleInWorkbenchRequest.role:type_name -> chorus.Role
	16, // 15: chorus.ManageUserRoleInWorkbenchReply.result:type_name -> chorus.ManageUserRoleInWorkbenchResult
	25, // 16: chorus.ManageUserRoleInWorkbenchResult.workbench:type_name -> chorus.Workbench
	19, // 17: chorus.RemoveUserFromWorkbenchReply.result:type_name -> chorus.RemoveUserFromWorkbenchResult
	25, // 18: chorus.RemoveUserFromWorkbenchResult.workbench:type_name -> chorus.Workbench
	22, // 19: chorus.DeleteWorkbenchReply.result:type_name -> chorus.DeleteWorkbenchResult
	4,  // 20: chorus.WorkbenchService.GetWorkbench:input_type -> chorus.GetWorkbenchRequest
	0,  // 21: chorus.WorkbenchService.ListWorkbenchs:input_type -> chorus.ListWorkbenchsRequest
	25, // 22: chorus.WorkbenchService.CreateWorkbench:input_type -> chorus.Workbench
	25, // 23: chorus.WorkbenchService.UpdateWorkbench:input_type -> chorus.Workbench
	11, // 24: chorus.WorkbenchService.InviteInWorkbench:input_type -> chorus.InviteInWorkbenchRequest
	14, // 25: chorus.WorkbenchService.ManageUserRoleInWorkbench:input_type -> chorus.ManageUserRoleInWorkbenchRequest
	17, // 26: chorus.WorkbenchService.RemoveUserFromWorkbench:input_type -> chorus.RemoveUserFromWorkbenchRequest
	20, // 27: chorus.WorkbenchService.DeleteWorkbench:input_type -> chorus.DeleteWorkbenchRequest
	5,  // 28: chorus.WorkbenchService.GetWorkbench:output_type -> chorus.GetWorkbenchReply
	1,  // 29: chorus.WorkbenchService.ListWorkbenchs:output_type -> chorus.ListWorkbenchsReply
	7,  // 30: chorus.WorkbenchService.CreateWorkbench:output_type -> chorus.CreateWorkbenchReply
	9,  // 31: chorus.WorkbenchService.UpdateWorkbench:output_type -> chorus.UpdateWorkbenchReply
	12, // 32: chorus.WorkbenchService.InviteInWorkbench:output_type -> chorus.InviteInWorkbenchReply
	15, // 33: chorus.WorkbenchService.ManageUserRoleInWorkbench:output_type -> chorus.ManageUserRoleInWorkbenchReply
	18, // 34: chorus.WorkbenchService.RemoveUserFromWorkbench:output_type -> chorus.RemoveUserFromWorkbenchReply
	21, // 35: chorus.WorkbenchService.DeleteWorkbench:output_type -> chorus.DeleteWorkbenchReply
	28, // [28:36] is the sub-list for method output_type
	20, // [20:28] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_workbench_service_proto_init() }
func file_workbench_service_proto_init() {
	if File_workbench_service_proto != nil {
		return
	}
	file_common_proto_init()
	file_workbench_proto_init()
	file_user_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_workbench_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkbenchsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkbenchsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkbenchsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkbenchFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkbenchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkbenchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkbenchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWorkbenchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWorkbenchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkbenchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkbenchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteInWorkbenchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteInWorkbenchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteInWorkbenchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManageUserRoleInWorkbenchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManageUserRoleInWorkbenchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManageUserRoleInWorkbenchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveUserFromWorkbenchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveUserFromWorkbenchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveUserFromWorkbenchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWorkbenchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWorkbenchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWorkbenchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_workbench_service_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_workbench_service_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_workbench_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_workbench_service_proto_goTypes,
		DependencyIndexes: file_workbench_service_proto_depIdxs,
		MessageInfos:      file_workbench_service_proto_msgTypes,
	}.Build()
	File_workbench_service_proto = out.File
	file_workbench_service_proto_rawDesc = nil
	file_workbench_service_proto_goTypes = nil
	file_workbench_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WorkbenchServiceClient is the client API for WorkbenchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkbenchServiceClient interface {
	GetWorkbench(ctx context.Context, in *GetWorkbenchRequest, opts ...grpc.CallOption) (*GetWorkbenchReply, error)
	ListWorkbenchs(ctx context.Context, in *ListWorkbenchsRequest, opts ...grpc.CallOption) (*ListWorkbenchsReply, error)
	CreateWorkbench(ctx context.Context, in *Workbench, opts ...grpc.CallOption) (*CreateWorkbenchReply, error)
	UpdateWorkbench(ctx context.Context, in *Workbench, opts ...grpc.CallOption) (*UpdateWorkbenchReply, error)
	InviteInWorkbench(ctx context.Context, in *InviteInWorkbenchRequest, opts ...grpc.CallOption) (*InviteInWorkbenchReply, error)
	ManageUserRoleInWorkbench(ctx context.Context, in *ManageUserRoleInWorkbenchRequest, opts ...grpc.CallOption) (*ManageUserRoleInWorkbenchReply, error)
	RemoveUserFromWorkbench(ctx context.Context, in *RemoveUserFromWorkbenchRequest, opts ...grpc.CallOption) (*RemoveUserFromWorkbenchReply, error)
	DeleteWorkbench(ctx context.Context, in *DeleteWorkbenchRequest, opts ...grpc.CallOption) (*DeleteWorkbenchReply, error)
}

type workbenchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkbenchServiceClient(cc grpc.ClientConnInterface) WorkbenchServiceClient {
	return &workbenchServiceClient{cc}
}

func (c *workbenchServiceClient) GetWorkbench(ctx context.Context, in *GetWorkbenchRequest, opts ...grpc.CallOption) (*GetWorkbenchReply, error) {
	out := new(GetWorkbenchReply)
	err := c.cc.Invoke(ctx, "/chorus.WorkbenchService/GetWorkbench", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workbenchServiceClient) ListWorkbenchs(ctx context.Context, in *ListWorkbenchsRequest, opts ...grpc.CallOption) (*ListWorkbenchsReply, error) {
	out := new(ListWorkbenchsReply)
	err := c.cc.Invoke(ctx, "/chorus.WorkbenchService/ListWorkbenchs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workbenchServiceClient) CreateWorkbench(ctx context.Context, in *Workbench, opts ...grpc.CallOption) (*CreateWorkbenchReply, error) {
	out := new(CreateWorkbenchReply)
	err := c.cc.Invoke(ctx, "/chorus.WorkbenchService/CreateWorkbench", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workbenchServiceClient) UpdateWorkbench(ctx context.Context, in *Workbench, opts ...grpc.CallOption) (*UpdateWorkbenchReply, error) {
	out := new(UpdateWorkbenchReply)
	err := c.cc.Invoke(ctx, "/chorus.WorkbenchService/UpdateWorkbench", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workbenchServiceClient) InviteInWorkbench(ctx context.Context, in *InviteInWorkbenchRequest, opts ...grpc.CallOption) (*InviteInWorkbenchReply, error) {
	out := new(InviteInWorkbenchReply)
	err := c.cc.Invoke(ctx, "/chorus.WorkbenchService/InviteInWorkbench", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workbenchServiceClient) ManageUserRoleInWorkbench(ctx context.Context, in *ManageUserRoleInWorkbenchRequest, opts ...grpc.CallOption) (*ManageUserRoleInWorkbenchReply, error) {
	out := new(ManageUserRoleInWorkbenchReply)
	err := c.cc.Invoke(ctx, "/chorus.WorkbenchService/ManageUserRoleInWorkbench", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workbenchServiceClient) RemoveUserFromWorkbench(ctx context.Context, in *RemoveUserFromWorkbenchRequest, opts ...grpc.CallOption) (*RemoveUserFromWorkbenchReply, error) {
	out := new(RemoveUserFromWorkbenchReply)
	err := c.cc.Invoke(ctx, "/chorus.WorkbenchService/RemoveUserFromWorkbench", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workbenchServiceClient) DeleteWorkbench(ctx context.Context, in *DeleteWorkbenchRequest, opts ...grpc.CallOption) (*DeleteWorkbenchReply, error) {
	out := new(DeleteWorkbenchReply)
	err := c.cc.Invoke(ctx, "/chorus.WorkbenchService/DeleteWorkbench", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkbenchServiceServer is the server API for WorkbenchService service.
type WorkbenchServiceServer interface {
	GetWorkbench(context.Context, *GetWorkbenchRequest) (*GetWorkbenchReply, error)
	ListWorkbenchs(context.Context, *ListWorkbenchsRequest) (*ListWorkbenchsReply, error)
	CreateWorkbench(context.Context, *Workbench) (*CreateWorkbenchReply, error)
	UpdateWorkbench(context.Context, *Workbench) (*UpdateWorkbenchReply, error)
	InviteInWorkbench(context.Context, *InviteInWorkbenchRequest) (*InviteInWorkbenchReply, error)
	ManageUserRoleInWorkbench(context.Context, *ManageUserRoleInWorkbenchRequest) (*ManageUserRoleInWorkbenchReply, error)
	RemoveUserFromWorkbench(context.Context, *RemoveUserFromWorkbenchRequest) (*RemoveUserFromWorkbenchReply, error)
	DeleteWorkbench(context.Context, *DeleteWorkbenchRequest) (*DeleteWorkbenchReply, error)
}

// UnimplementedWorkbenchServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWorkbenchServiceServer struct {
}

func (*UnimplementedWorkbenchServiceServer) GetWorkbench(context.Context, *GetWorkbenchRequest) (*GetWorkbenchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkbench not implemented")
}
func (*UnimplementedWorkbenchServiceServer) ListWorkbenchs(context.Context, *ListWorkbenchsRequest) (*ListWorkbenchsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkbenchs not implemented")
}
func (*UnimplementedWorkbenchServiceServer) CreateWorkbench(context.Context, *Workbench) (*CreateWorkbenchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkbench not implemented")
}
func (*UnimplementedWorkbenchServiceServer) UpdateWorkbench(context.Context, *Workbench) (*UpdateWorkbenchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkbench not implemented")
}
func (*UnimplementedWorkbenchServiceServer) InviteInWorkbench(context.Context, *InviteInWorkbenchRequest) (*InviteInWorkbenchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteInWorkbench not implemented")
}
func (*UnimplementedWorkbenchServiceServer) ManageUserRoleInWorkbench(context.Context, *ManageUserRoleInWorkbenchRequest) (*ManageUserRoleInWorkbenchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageUserRoleInWorkbench not implemented")
}
func (*UnimplementedWorkbenchServiceServer) RemoveUserFromWorkbench(context.Context, *RemoveUserFromWorkbenchRequest) (*RemoveUserFromWorkbenchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserFromWorkbench not implemented")
}
func (*UnimplementedWorkbenchServiceServer) DeleteWorkbench(context.Context, *DeleteWorkbenchRequest) (*DeleteWorkbenchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkbench not implemented")
}

func RegisterWorkbenchServiceServer(s *grpc.Server, srv WorkbenchServiceServer) {
	s.RegisterService(&_WorkbenchService_serviceDesc, srv)
}

func _WorkbenchService_GetWorkbench_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkbenchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkbenchServiceServer).GetWorkbench(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chorus.WorkbenchService/GetWorkbench",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkbenchServiceServer).GetWorkbench(ctx, req.(*GetWorkbenchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkbenchService_ListWorkbenchs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkbenchsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkbenchServiceServer).ListWorkbenchs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chorus.WorkbenchService/ListWorkbenchs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkbenchServiceServer).ListWorkbenchs(ctx, req.(*ListWorkbenchsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkbenchService_CreateWorkbench_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workbench)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkbenchServiceServer).CreateWorkbench(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chorus.WorkbenchService/CreateWorkbench",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkbenchServiceServer).CreateWorkbench(ctx, req.(*Workbench))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkbenchService_UpdateWorkbench_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workbench)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkbenchServiceServer).UpdateWorkbench(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chorus.WorkbenchService/UpdateWorkbench",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkbenchServiceServer).UpdateWorkbench(ctx, req.(*Workbench))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkbenchService_InviteInWorkbench_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteInWorkbenchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkbenchServiceServer).InviteInWorkbench(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chorus.WorkbenchService/InviteInWorkbench",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkbenchServiceServer).InviteInWorkbench(ctx, req.(*InviteInWorkbenchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkbenchService_ManageUserRoleInWorkbench_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageUserRoleInWorkbenchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkbenchServiceServer).ManageUserRoleInWorkbench(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chorus.WorkbenchService/ManageUserRoleInWorkbench",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkbenchServiceServer).ManageUserRoleInWorkbench(ctx, req.(*ManageUserRoleInWorkbenchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkbenchService_RemoveUserFromWorkbench_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserFromWorkbenchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkbenchServiceServer).RemoveUserFromWorkbench(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chorus.WorkbenchService/RemoveUserFromWorkbench",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkbenchServiceServer).RemoveUserFromWorkbench(ctx, req.(*RemoveUserFromWorkbenchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkbenchService_DeleteWorkbench_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkbenchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkbenchServiceServer).DeleteWorkbench(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chorus.WorkbenchService/DeleteWorkbench",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkbenchServiceServer).DeleteWorkbench(ctx, req.(*DeleteWorkbenchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkbenchService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chorus.WorkbenchService",
	HandlerType: (*WorkbenchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWorkbench",
			Handler:    _WorkbenchService_GetWorkbench_Handler,
		},
		{
			MethodName: "ListWorkbenchs",
			Handler:    _WorkbenchService_ListWorkbenchs_Handler,
		},
		{
			MethodName: "CreateWorkbench",
			Handler:    _WorkbenchService_CreateWorkbench_Handler,
		},
		{
			MethodName: "UpdateWorkbench",
			Handler:    _WorkbenchService_UpdateWorkbench_Handler,
		},
		{
			MethodName: "InviteInWorkbench",
			Handler:    _WorkbenchService_InviteInWorkbench_Handler,
		},
		{
			MethodName: "ManageUserRoleInWorkbench",
			Handler:    _WorkbenchService_ManageUserRoleInWorkbench_Handler,
		},
		{
			MethodName: "RemoveUserFromWorkbench",
			Handler:    _WorkbenchService_RemoveUserFromWorkbench_Handler,
		},
		{
			MethodName: "DeleteWorkbench",
			Handler:    _WorkbenchService_DeleteWorkbench_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workbench-service.proto",
}
