pipeline {
  agent {
    kubernetes {
      cloud 'kubernetes-int'
      namespace 'jenkins-int-pipeline'
      label "ci-chorus-cicd-chorus-${UUID.randomUUID().toString()}"
      yamlFile "jenkins/agents/unit.yaml"
      defaultContainer 'chorus-ubuntu'
    }
  }
  environment{
    componentName = 'chorus'
  }
  stages {
    stage('Set version') {
      when {
        not {
          branch 'release/v*'
        }
      }
      steps {
        sh '''#!/bin/bash -xe
          VERSION=$BRANCH_NAME-$BUILD_ID
          VERSION=$(echo "$VERSION" | awk '{print tolower($0)}')
          IMAGE_TAG=$(echo -n ${VERSION//[\\/_]/-})
          IMAGE_TAG=$(echo "$IMAGE_TAG" | awk '{print tolower($0)}')
          RELEASE_NAME="${componentName}-$VERSION"
          RELEASE_NAME=$(echo -n ${RELEASE_NAME//[\\/_\\.]/-})
          RELEASE_NAME=$(echo "$RELEASE_NAME" | awk '{print tolower($0)}')
          DEPLOY_VERSION=$IMAGE_TAG

          echo -n $RELEASE_NAME > $WORKSPACE/release_name
          echo -n $VERSION > $WORKSPACE/version
          echo -n $IMAGE_TAG > $WORKSPACE/image_tag
          echo -n $DEPLOY_VERSION > $WORKSPACE/deploy_version

          echo "VERSION $VERSION"
          echo "IMAGE_TAG $IMAGE_TAG"
          echo "JOB_NAME $JOB_NAME"
          echo "RELEASE_NAME $RELEASE_NAME"
          echo "DEPLOY_VERSION $DEPLOY_VERSION"
        '''
        script {
          env.VERSION = readFile("$WORKSPACE/version")
          env.IMAGE_TAG = readFile("$WORKSPACE/image_tag")
          env.RELEASE_NAME = readFile("$WORKSPACE/release_name")
          env.DEPLOY_VERSION = readFile("$WORKSPACE/deploy_version")
        }
      }
    }

    stage('Set release version') {
      when {
        branch 'release/v*'
      }
      steps {
        sh '''#!/bin/bash -xe
          stripped=${BRANCH_NAME#release/v}
          MAJOR=$(echo $stripped | cut -d'.' -f1)
          MINOR=$(echo $stripped | cut -d'.' -f2)
          VERSION=v$MAJOR.$MINOR.$BUILD_ID
          VERSION=$(echo "$VERSION" | awk '{print tolower($0)}')
          IMAGE_TAG=$(echo -n ${VERSION//[\\/_]/-})
          IMAGE_TAG=$(echo "$IMAGE_TAG" | awk '{print tolower($0)}')
          RELEASE_NAME="${componentName}-$VERSION"
          RELEASE_NAME=$(echo -n ${RELEASE_NAME//[\\/_\\.]/-})
          RELEASE_NAME=$(echo "$RELEASE_NAME" | awk '{print tolower($0)}')
          DEPLOY_VERSION=$RELEASE_NAME
          
          echo -n $RELEASE_NAME > $WORKSPACE/release_name
          echo -n $VERSION > $WORKSPACE/version
          echo -n $IMAGE_TAG > $WORKSPACE/image_tag
          echo -n $DEPLOY_VERSION > $WORKSPACE/deploy_version
          
          echo "VERSION $VERSION"
          echo "IMAGE_TAG $IMAGE_TAG"
          echo "JOB_NAME $JOB_NAME"
          echo "RELEASE_NAME $RELEASE_NAME"
          echo "DEPLOY_VERSION $DEPLOY_VERSION"
        '''
        script {
          env.VERSION = readFile("$WORKSPACE/version")
          env.IMAGE_TAG = readFile("$WORKSPACE/image_tag")
          env.RELEASE_NAME = readFile("$WORKSPACE/release_name")
          env.DEPLOY_VERSION = readFile("$WORKSPACE/deploy_version")
        }
      }
    }

    stage('Test & Build') {
      steps {
        container(name: 'chorus-ubuntu', shell: '/bin/bash') {
          dir('chorus-dev-ops') {
            checkout scm
            sh '''
              PATH="$PATH:$PWD/scripts/tools/linux/bin"

              go test ./...

              # golangci-lint run
              
              
              cd docker
              ./build-stage2.sh
            '''
          }
        }
      }
    }

    // stage('Test') {
    //   agent {
    //     docker {
    //         image "harbor.build.chorus-tre.ch/chorus/backend:${IMAGE_TAG}"
    //         registryUrl 'https://harbor.build.chorus-tre.ch'
    //         registryCredentialsId 'harbor-build-registry'
    //         alwaysPull true
    //     }
    //   }
    //   steps {
    //     dir('chorus-dev-ops') {
    //       checkout scm
    //       sh '''
    //         # /chorus/bin/chorus test
    //       '''
    //     }
    //   }
    // }

    stage('Test CI') {
      stages {
        stage('deploy & test') {
          stages {
            stage('deploy'){
              steps {
                dir('chorus-dev-ops') {
                  checkout scm
                  sh '''
                    export env=ci
                    cd deploy
                    echo "KUBECONFIG $KUBECONFIG"
                    ./deploy.sh 

                    kubectl cluster-info
                  '''
                }
              }
            }
            stage('test') {
              agent {
                docker {
                    image "harbor.build.chorus-tre.ch/chorus/backend:${IMAGE_TAG}"
                    registryUrl 'https://harbor.build.chorus-tre.ch'
                    registryCredentialsId 'harbor-build-registry'
                    alwaysPull true
                    args "-u root"
                    // args '-ti --entrypoint /bin/bash'
                }
              }
              steps {
                // sh """
                //   echo hello
                // """
                dir('chorus-dev-ops') {
                  checkout scm
                  withCredentials([
                    file([credentialsId: 'Kubernetes-INT-microk8s-admin-config', variable: "KUBECONFIG"]),
                    file([credentialsId: 'registry-auth-docker-config', variable: "DOCKER_CONFIG"]),
                  ]){
                    sh """
                      echo "KUBECONFIG $KUBECONFIG"
                      kubectl cluster-info

                      echo "looking for pod name"
                      POD_NAME=\$(kubectl get pods -n ci -l app=deployment-backend-${RELEASE_NAME} -o jsonpath="{.items[0].metadata.name}")
                      
                      echo "waiting 60sec for pod \$POD_NAME to be ready"
                      kubectl wait --for=condition=ready pod \$POD_NAME -n ci --timeout=60s
                      echo "pod \$POD_NAME is ready"
                      
                      echo "port-forwarding and logging service/service-backend-${RELEASE_NAME}"
                      kubectl -n ci port-forward service/service-backend-${RELEASE_NAME} 5000:5000 &
                      kubectl -n ci logs -f pod/\$POD_NAME &

                      sleep 20

                      echo "running acceptance tests"
                      ./scripts/run_acceptance_tests.sh
                    """
                  }
                }
              }
            }
          }
          post {
            always {
              sh '''
                helm uninstall --timeout 60s --namespace ci "${RELEASE_NAME}" || true
              '''
            }
            failure {
              sh '''
                echo no
              '''
            }
          }
        }
      }
    }

    stage('Tag & deploy') {
      when {
        anyOf {
          branch 'master'
          branch 'release/v*'
        }
      }
      stages {
        stage('tag') {
          steps {
            container(name: 'chorus-ubuntu', shell: '/bin/bash') {
              withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'jenkins', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD']]) {
                dir('chorus-dev-ops') {
                  checkout scm
                  sh """
                    git config --global --add safe.directory '*'
                    git tag $VERSION
                    git push https://${env.GIT_USERNAME}:${env.GIT_PASSWORD}@github.com/CHORUS-TRE/chorus-backend.git $VERSION
                  """
                }
              }
            }
          }
        }
        // stage('Deploy master') {
        //   when {
        //     branch 'master'
        //   }
        //   steps {
        //     container(name: 'chorus-ubuntu', shell: '/bin/bash') {
        //       dir('chorus-dev-ops') {
        //         checkout scm
        //         sh """
        //           export env=int
        //           export RELEASE_NAME="${componentName}-int-master"
        //           cd deploy
        //           ./deploy.sh
        //         """
        //       }
        //     }
        //   }
        // }
      }
    }
  }
}
