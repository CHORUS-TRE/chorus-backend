pipeline {
  agent {
    kubernetes {
      cloud 'kubernetes-int'
      namespace 'jenkins-int-pipeline'
      label "ci-chorus-cicd-chorus-${UUID.randomUUID().toString()}"
      yamlFile "jenkins/agents/unit.yaml"
      defaultContainer 'chorus-ubuntu'
    }
  }
  environment{
    componentName = 'chorus'
  }
  stages {
    stage('Set version') {
      when {
        not {
          branch 'release/v*'
        }
      }
      steps {
        sh '''#!/bin/bash -xe
          VERSION=$BRANCH_NAME-$BUILD_ID
          VERSION=$(echo "$VERSION" | awk '{print tolower($0)}')
          IMAGE_TAG=$(echo -n ${VERSION//[\\/_]/-})
          IMAGE_TAG=$(echo "$IMAGE_TAG" | awk '{print tolower($0)}')
          RELEASE_NAME="${componentName}-$VERSION"
          RELEASE_NAME=$(echo -n ${RELEASE_NAME//[\\/_]/-})
          RELEASE_NAME=$(echo "$RELEASE_NAME" | awk '{print tolower($0)}')

          echo -n $RELEASE_NAME > $WORKSPACE/release_name
          echo -n $VERSION > $WORKSPACE/version
          echo -n $IMAGE_TAG > $WORKSPACE/image_tag
          
          echo "VERSION $VERSION"
          echo "IMAGE_TAG $IMAGE_TAG"
          echo "JOB_NAME $JOB_NAME"
          echo "RELEASE_NAME $RELEASE_NAME"
        '''
        script {
          env.VERSION = readFile("$WORKSPACE/version")
          env.IMAGE_TAG = readFile("$WORKSPACE/image_tag")
          env.RELEASE_NAME = readFile("$WORKSPACE/release_name")
        }
      }
    }

    stage('Set release version') {
      when {
        branch 'release/v*'
      }
      steps {
        sh '''#!/bin/bash -xe
          stripped=${BRANCH_NAME#release/v}
          MAJOR=$(echo $stripped | cut -d'.' -f1)
          MINOR=$(echo $stripped | cut -d'.' -f2)
          VERSION=v$MAJOR.$MINOR.$BUILD_ID
          VERSION=$(echo "$VERSION" | awk '{print tolower($0)}')
          RELEASE_NAME="${componentName}-$VERSION"
          RELEASE_NAME=$(echo -n ${RELEASE_NAME//[\\/_]/-})
          RELEASE_NAME=$(echo "$RELEASE_NAME" | awk '{print tolower($0)}')
          
          echo $VERSION > $WORKSPACE/version
          echo ${VERSION//\\//-} > $WORKSPACE/image_tag
          echo -n $RELEASE_NAME > $WORKSPACE/release_name

          echo $VERSION
        '''
        script {
          env.VERSION = readFile("$WORKSPACE/version")
          env.IMAGE_TAG = readFile("$WORKSPACE/image_tag")
        }
      }
    }

    stage('Build') {
      steps {
        container(name: 'chorus-ubuntu', shell: '/bin/bash') {
          dir('chorus-dev-ops') {
            checkout scm
            sh '''
              PATH="$PATH:$PWD/scripts/tools/linux/bin"
              # golangci-lint run
              cd docker
              ./build-stage2.sh
            '''
          }
        }
      }
    }

    // stage('Test') {
    //   agent {
    //     docker {
    //         image "registry.dip-dev.thehip.app/chorus-cicd-chorus:${IMAGE_TAG}"
    //         registryUrl 'https://registry.dip-dev.thehip.app'
    //         registryCredentialsId 'chorus_registry'
    //         alwaysPull true
    //     }
    //   }
    //   steps {
    //     dir('chorus-dev-ops') {
    //       checkout scm
    //       sh '''
    //         # /chorus/bin/chorus test
    //       '''
    //     }
    //   }
    // }

    stage('Test CI') {
      stages {
        stage('deploy & test') {
          stages {
            stage('deploy'){
              steps {
                dir('chorus-dev-ops') {
                  checkout scm
                  sh '''
                    export env=ci
                    cd deploy
                    ./deploy.sh 
                  '''
                }
              }
            }
            stage('test') {
              agent {
                docker {
                    image "registry.dip-dev.thehip.app/chorus-cicd-chorus:${IMAGE_TAG}"
                    registryUrl 'https://registry.dip-dev.thehip.app'
                    registryCredentialsId 'chorus_registry'
                    alwaysPull true
                    args '-ti --entrypoint /bin/bash'
                }
              }
              steps {
                dir('chorus-dev-ops') {
                  sh """
                    echo hello
                  """
                  // checkout scm
                  // withCredentials([
                  //   file([credentialsId: 'Kubernetes-INT-microk8s-admin-config', variable: "KUBECONFIG"]),
                  //   file([credentialsId: 'registry-auth-docker-config', variable: "DOCKER_CONFIG"]),
                  // ]){
                  //   sh """
                  //     // echo "looking for pod name"
                  //     // POD_NAME=\$(kubectl get pods -n ci -l app=deployment-backend-${RELEASE_NAME} -o jsonpath="{.items[0].metadata.name}")
                  //     // echo "waiting 60sec for pod \$POD_NAME to be ready"
                  //     // kubectl wait --for=condition=ready pod \$POD_NAME -n ci --timeout=60s
                  //     // kubectl -n ci port-forward service/service-backend-${RELEASE_NAME} 5000:5000 &
                  //     // kubectl -n ci logs -f pod/\$POD_NAME &
                  //     // sleep 20
                  //     // python3 -m unittest discover ./src/tests/acceptance
                  //   """
                  // }
                }
              }
            }
          }
          post {
            always {
              sh '''
                helm uninstall --timeout 60s --namespace ci "${RELEASE_NAME}" || true
              '''
            }
            failure {
              sh '''
                echo no
              '''
            }
          }
        }
      }
    }

    stage('Master') {
      when {
        branch 'master'
      }
      stages {
        stage('Deploy') {
          steps {
            container(name: 'chorus-ubuntu', shell: '/bin/bash') {
              dir('chorus-dev-ops') {
                checkout scm
                sh """
                  export env=int
                  export RELEASE_NAME="${componentName}-int-master"
                  cd deploy
                  ./deploy.sh
                """
              }
            }
          }
        }
      }
    }
  }
}
