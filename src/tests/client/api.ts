/* tslint:disable */
/* eslint-disable */
/**
 * template backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: development.bdsc@chuv.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface IndexServiceCreateHelloRequest
 */
export interface IndexServiceCreateHelloRequest {
    /**
     * 
     * @type {string}
     * @memberof IndexServiceCreateHelloRequest
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof IndexServiceCreateHelloRequest
     */
    'content'?: string;
}
/**
 * 
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    [key: string]: object;

    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
    /**
     * 
     * @type {number}
     * @memberof RpcStatus
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RpcStatus
     */
    'message'?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RpcStatus
     */
    'details'?: Array<ProtobufAny>;
}
/**
 * 
 * @export
 * @interface TemplatebackendAuthenticationReply
 */
export interface TemplatebackendAuthenticationReply {
    /**
     * 
     * @type {TemplatebackendAuthenticationResult}
     * @memberof TemplatebackendAuthenticationReply
     */
    'result'?: TemplatebackendAuthenticationResult;
}
/**
 * 
 * @export
 * @interface TemplatebackendAuthenticationResult
 */
export interface TemplatebackendAuthenticationResult {
    /**
     * 
     * @type {string}
     * @memberof TemplatebackendAuthenticationResult
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface TemplatebackendCreateHelloReply
 */
export interface TemplatebackendCreateHelloReply {
    /**
     * 
     * @type {number}
     * @memberof TemplatebackendCreateHelloReply
     */
    'identifier'?: number;
    /**
     * 
     * @type {string}
     * @memberof TemplatebackendCreateHelloReply
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplatebackendCreateHelloReply
     */
    'content'?: string;
}
/**
 * 
 * @export
 * @interface TemplatebackendCreateUserReply
 */
export interface TemplatebackendCreateUserReply {
    /**
     * 
     * @type {TemplatebackendCreateUserResult}
     * @memberof TemplatebackendCreateUserReply
     */
    'result'?: TemplatebackendCreateUserResult;
}
/**
 * 
 * @export
 * @interface TemplatebackendCreateUserResult
 */
export interface TemplatebackendCreateUserResult {
    /**
     * 
     * @type {string}
     * @memberof TemplatebackendCreateUserResult
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface TemplatebackendCredentials
 */
export interface TemplatebackendCredentials {
    /**
     * 
     * @type {string}
     * @memberof TemplatebackendCredentials
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplatebackendCredentials
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplatebackendCredentials
     */
    'totp'?: string;
}
/**
 * 
 * @export
 * @interface TemplatebackendDeleteUserReply
 */
export interface TemplatebackendDeleteUserReply {
    /**
     * 
     * @type {object}
     * @memberof TemplatebackendDeleteUserReply
     */
    'result'?: object;
}
/**
 * 
 * @export
 * @interface TemplatebackendGetHelloReply
 */
export interface TemplatebackendGetHelloReply {
    /**
     * 
     * @type {string}
     * @memberof TemplatebackendGetHelloReply
     */
    'content'?: string;
}
/**
 * 
 * @export
 * @interface TemplatebackendGetUserMeReply
 */
export interface TemplatebackendGetUserMeReply {
    /**
     * 
     * @type {TemplatebackendGetUserMeResult}
     * @memberof TemplatebackendGetUserMeReply
     */
    'result'?: TemplatebackendGetUserMeResult;
}
/**
 * 
 * @export
 * @interface TemplatebackendGetUserMeResult
 */
export interface TemplatebackendGetUserMeResult {
    /**
     * 
     * @type {TemplatebackendUser}
     * @memberof TemplatebackendGetUserMeResult
     */
    'me'?: TemplatebackendUser;
}
/**
 * 
 * @export
 * @interface TemplatebackendGetUserReply
 */
export interface TemplatebackendGetUserReply {
    /**
     * 
     * @type {TemplatebackendGetUserResult}
     * @memberof TemplatebackendGetUserReply
     */
    'result'?: TemplatebackendGetUserResult;
}
/**
 * 
 * @export
 * @interface TemplatebackendGetUserResult
 */
export interface TemplatebackendGetUserResult {
    /**
     * 
     * @type {TemplatebackendUser}
     * @memberof TemplatebackendGetUserResult
     */
    'user'?: TemplatebackendUser;
}
/**
 * 
 * @export
 * @interface TemplatebackendResetPasswordReply
 */
export interface TemplatebackendResetPasswordReply {
    /**
     * 
     * @type {object}
     * @memberof TemplatebackendResetPasswordReply
     */
    'result'?: object;
}
/**
 * 
 * @export
 * @interface TemplatebackendUpdatePasswordReply
 */
export interface TemplatebackendUpdatePasswordReply {
    /**
     * 
     * @type {object}
     * @memberof TemplatebackendUpdatePasswordReply
     */
    'result'?: object;
}
/**
 * 
 * @export
 * @interface TemplatebackendUpdatePasswordRequest
 */
export interface TemplatebackendUpdatePasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof TemplatebackendUpdatePasswordRequest
     */
    'currentPassword'?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplatebackendUpdatePasswordRequest
     */
    'newPassword'?: string;
}
/**
 * 
 * @export
 * @interface TemplatebackendUser
 */
export interface TemplatebackendUser {
    /**
     * 
     * @type {string}
     * @memberof TemplatebackendUser
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplatebackendUser
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplatebackendUser
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplatebackendUser
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplatebackendUser
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplatebackendUser
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplatebackendUser
     */
    'status'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TemplatebackendUser
     */
    'roles'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof TemplatebackendUser
     */
    'totpEnabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TemplatebackendUser
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplatebackendUser
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TemplatebackendUser
     */
    'passwordChanged'?: boolean;
}

/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint authenticates a user
         * @summary Authenticate
         * @param {TemplatebackendCredentials} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationServiceAuthenticate: async (body: TemplatebackendCredentials, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('authenticationServiceAuthenticate', 'body', body)
            const localVarPath = `/api/rest/v1/authentication/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint authenticates a user
         * @summary Authenticate
         * @param {TemplatebackendCredentials} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticationServiceAuthenticate(body: TemplatebackendCredentials, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplatebackendAuthenticationReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticationServiceAuthenticate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * This endpoint authenticates a user
         * @summary Authenticate
         * @param {TemplatebackendCredentials} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationServiceAuthenticate(body: TemplatebackendCredentials, options?: any): AxiosPromise<TemplatebackendAuthenticationReply> {
            return localVarFp.authenticationServiceAuthenticate(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * This endpoint authenticates a user
     * @summary Authenticate
     * @param {TemplatebackendCredentials} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authenticationServiceAuthenticate(body: TemplatebackendCredentials, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authenticationServiceAuthenticate(body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * IndexApi - axios parameter creator
 * @export
 */
export const IndexApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint returns a hello
         * @summary Get a hello
         * @param {number} identifier 
         * @param {IndexServiceCreateHelloRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexServiceCreateHello: async (identifier: number, body: IndexServiceCreateHelloRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            assertParamExists('indexServiceCreateHello', 'identifier', identifier)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('indexServiceCreateHello', 'body', body)
            const localVarPath = `/api/v1/hello/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a hello
         * @summary Get a hello
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexServiceGetHello: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/hello`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a hello
         * @summary Get a hello
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexServiceGetHelloo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/helloo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IndexApi - functional programming interface
 * @export
 */
export const IndexApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IndexApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint returns a hello
         * @summary Get a hello
         * @param {number} identifier 
         * @param {IndexServiceCreateHelloRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexServiceCreateHello(identifier: number, body: IndexServiceCreateHelloRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplatebackendCreateHelloReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexServiceCreateHello(identifier, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a hello
         * @summary Get a hello
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexServiceGetHello(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplatebackendGetHelloReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexServiceGetHello(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a hello
         * @summary Get a hello
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexServiceGetHelloo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplatebackendGetHelloReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexServiceGetHelloo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IndexApi - factory interface
 * @export
 */
export const IndexApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IndexApiFp(configuration)
    return {
        /**
         * This endpoint returns a hello
         * @summary Get a hello
         * @param {number} identifier 
         * @param {IndexServiceCreateHelloRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexServiceCreateHello(identifier: number, body: IndexServiceCreateHelloRequest, options?: any): AxiosPromise<TemplatebackendCreateHelloReply> {
            return localVarFp.indexServiceCreateHello(identifier, body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a hello
         * @summary Get a hello
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexServiceGetHello(options?: any): AxiosPromise<TemplatebackendGetHelloReply> {
            return localVarFp.indexServiceGetHello(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a hello
         * @summary Get a hello
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexServiceGetHelloo(options?: any): AxiosPromise<TemplatebackendGetHelloReply> {
            return localVarFp.indexServiceGetHelloo(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IndexApi - object-oriented interface
 * @export
 * @class IndexApi
 * @extends {BaseAPI}
 */
export class IndexApi extends BaseAPI {
    /**
     * This endpoint returns a hello
     * @summary Get a hello
     * @param {number} identifier 
     * @param {IndexServiceCreateHelloRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexApi
     */
    public indexServiceCreateHello(identifier: number, body: IndexServiceCreateHelloRequest, options?: AxiosRequestConfig) {
        return IndexApiFp(this.configuration).indexServiceCreateHello(identifier, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns a hello
     * @summary Get a hello
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexApi
     */
    public indexServiceGetHello(options?: AxiosRequestConfig) {
        return IndexApiFp(this.configuration).indexServiceGetHello(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns a hello
     * @summary Get a hello
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexApi
     */
    public indexServiceGetHelloo(options?: AxiosRequestConfig) {
        return IndexApiFp(this.configuration).indexServiceGetHelloo(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint creates a user
         * @summary Create a user
         * @param {TemplatebackendUser} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceCreateUser: async (body: TemplatebackendUser, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('userServiceCreateUser', 'body', body)
            const localVarPath = `/api/rest/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint deletes a user
         * @summary Delete a user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceDeleteUser: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userServiceDeleteUser', 'id', id)
            const localVarPath = `/api/rest/v1/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a user
         * @summary Get a user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceGetUser: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userServiceGetUser', 'id', id)
            const localVarPath = `/api/rest/v1/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the details of the authenticated user
         * @summary Get my own user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceGetUserMe: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint resets a user\'s password
         * @summary Reset password
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceResetPassword: async (id: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userServiceResetPassword', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('userServiceResetPassword', 'body', body)
            const localVarPath = `/api/rest/v1/users/{id}/password/reset`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint updates the password of the authenticated user
         * @summary Update password
         * @param {TemplatebackendUpdatePasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceUpdatePassword: async (body: TemplatebackendUpdatePasswordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('userServiceUpdatePassword', 'body', body)
            const localVarPath = `/api/rest/v1/users/me/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint creates a user
         * @summary Create a user
         * @param {TemplatebackendUser} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userServiceCreateUser(body: TemplatebackendUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplatebackendCreateUserReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userServiceCreateUser(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint deletes a user
         * @summary Delete a user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userServiceDeleteUser(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplatebackendDeleteUserReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userServiceDeleteUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a user
         * @summary Get a user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userServiceGetUser(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplatebackendGetUserReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userServiceGetUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns the details of the authenticated user
         * @summary Get my own user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userServiceGetUserMe(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplatebackendGetUserMeReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userServiceGetUserMe(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint resets a user\'s password
         * @summary Reset password
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userServiceResetPassword(id: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplatebackendResetPasswordReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userServiceResetPassword(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint updates the password of the authenticated user
         * @summary Update password
         * @param {TemplatebackendUpdatePasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userServiceUpdatePassword(body: TemplatebackendUpdatePasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplatebackendUpdatePasswordReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userServiceUpdatePassword(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * This endpoint creates a user
         * @summary Create a user
         * @param {TemplatebackendUser} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceCreateUser(body: TemplatebackendUser, options?: any): AxiosPromise<TemplatebackendCreateUserReply> {
            return localVarFp.userServiceCreateUser(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint deletes a user
         * @summary Delete a user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceDeleteUser(id: string, options?: any): AxiosPromise<TemplatebackendDeleteUserReply> {
            return localVarFp.userServiceDeleteUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a user
         * @summary Get a user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceGetUser(id: string, options?: any): AxiosPromise<TemplatebackendGetUserReply> {
            return localVarFp.userServiceGetUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the details of the authenticated user
         * @summary Get my own user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceGetUserMe(options?: any): AxiosPromise<TemplatebackendGetUserMeReply> {
            return localVarFp.userServiceGetUserMe(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint resets a user\'s password
         * @summary Reset password
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceResetPassword(id: string, body: object, options?: any): AxiosPromise<TemplatebackendResetPasswordReply> {
            return localVarFp.userServiceResetPassword(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint updates the password of the authenticated user
         * @summary Update password
         * @param {TemplatebackendUpdatePasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceUpdatePassword(body: TemplatebackendUpdatePasswordRequest, options?: any): AxiosPromise<TemplatebackendUpdatePasswordReply> {
            return localVarFp.userServiceUpdatePassword(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * This endpoint creates a user
     * @summary Create a user
     * @param {TemplatebackendUser} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userServiceCreateUser(body: TemplatebackendUser, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).userServiceCreateUser(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint deletes a user
     * @summary Delete a user
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userServiceDeleteUser(id: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).userServiceDeleteUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns a user
     * @summary Get a user
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userServiceGetUser(id: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).userServiceGetUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns the details of the authenticated user
     * @summary Get my own user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userServiceGetUserMe(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).userServiceGetUserMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint resets a user\'s password
     * @summary Reset password
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userServiceResetPassword(id: string, body: object, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).userServiceResetPassword(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint updates the password of the authenticated user
     * @summary Update password
     * @param {TemplatebackendUpdatePasswordRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userServiceUpdatePassword(body: TemplatebackendUpdatePasswordRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).userServiceUpdatePassword(body, options).then((request) => request(this.axios, this.basePath));
    }
}



