swagger: "2.0"
info:
  title: chorus user service
  version: "1.0"
  contact:
    name: chorus user service
    url: https://github.com/CHORUS-TRE/chorus-backend
    email: dev@chorus-tre.ch
tags:
  - name: UserService
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /api/rest/v1/users:
    get:
      summary: List users
      description: This endpoint returns a list of users
      operationId: UserService_ListUsers
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusListUsersReply'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: pagination.offset
          description: Optionally offset the number of results
          in: query
          required: false
          type: integer
          format: int64
        - name: pagination.limit
          description: Optionally limit the number of results (between 1 and 500)
          in: query
          required: false
          type: integer
          format: int64
        - name: pagination.sort.order
          in: query
          required: false
          type: string
        - name: pagination.sort.type
          in: query
          required: false
          type: string
        - name: pagination.query
          description: Optionally filter the results
          in: query
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
          x-example:
            - user_id=9999
            - status=STATUS_CREATED,STATUS_CLOSED
        - name: filter.idsIn
          in: query
          required: false
          type: array
          items:
            type: string
            format: uint64
          collectionFormat: multi
        - name: filter.workspaceIDs
          in: query
          required: false
          type: array
          items:
            type: string
            format: uint64
          collectionFormat: multi
        - name: filter.workbenchIDs
          in: query
          required: false
          type: array
          items:
            type: string
            format: uint64
          collectionFormat: multi
        - name: filter.search
          in: query
          required: false
          type: string
      tags:
        - UserService
    post:
      summary: Create a user
      description: This endpoint creates a user
      operationId: UserService_CreateUser
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusCreateUserReply'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/chorusUser'
      tags:
        - UserService
      security: []
    put:
      summary: Update a user
      description: This endpoint updates a user
      operationId: UserService_UpdateUser
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusUpdateUserReply'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/chorusUser'
      tags:
        - UserService
  /api/rest/v1/users/me:
    get:
      summary: Get my own user
      description: This endpoint returns the details of the authenticated user
      operationId: UserService_GetUserMe
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusGetUserMeReply'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      tags:
        - UserService
  /api/rest/v1/users/me/password:
    put:
      summary: Update password
      description: This endpoint updates the password of the authenticated user
      operationId: UserService_UpdatePassword
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusUpdatePasswordReply'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/chorusUpdatePasswordRequest'
      tags:
        - UserService
  /api/rest/v1/users/me/totp/enable:
    post:
      summary: Enable TOTP
      description: This endpoint enables the TOTP of the authenticated user
      operationId: UserService_EnableTotp
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusEnableTotpReply'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/chorusEnableTotpRequest'
      tags:
        - UserService
  /api/rest/v1/users/me/totp/reset:
    post:
      summary: Reset TOTP
      description: This endpoint resets the TOTP of the authenticated user
      operationId: UserService_ResetTotp
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusResetTotpReply'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/chorusResetTotpRequest'
      tags:
        - UserService
  /api/rest/v1/users/{id}:
    get:
      summary: Get a user
      description: This endpoint returns a user
      operationId: UserService_GetUser
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusGetUserReply'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - UserService
    delete:
      summary: Delete a user
      description: This endpoint deletes a user
      operationId: UserService_DeleteUser
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusDeleteUserReply'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - UserService
  /api/rest/v1/users/{id}/password/reset:
    post:
      summary: Reset password
      description: This endpoint resets a user's password
      operationId: UserService_ResetPassword
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusResetPasswordReply'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          type: string
          format: uint64
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserServiceResetPasswordBody'
      tags:
        - UserService
definitions:
  UserServiceResetPasswordBody:
    type: object
    title: Reset Password
  chorusCreateUserReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusCreateUserResult'
    title: Create Users
  chorusCreateUserResult:
    type: object
    properties:
      user:
        $ref: '#/definitions/chorusUser'
  chorusDeleteUserReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusDeleteUserResult'
  chorusDeleteUserResult:
    type: object
  chorusEnableTotpReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusEnableTotpResult'
  chorusEnableTotpRequest:
    type: object
    properties:
      totp:
        type: string
    title: Enable TOTP
  chorusEnableTotpResult:
    type: object
  chorusGetUserMeReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusGetUserMeResult'
  chorusGetUserMeResult:
    type: object
    properties:
      me:
        $ref: '#/definitions/chorusUser'
  chorusGetUserReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusGetUserResult'
  chorusGetUserResult:
    type: object
    properties:
      user:
        $ref: '#/definitions/chorusUser'
  chorusListUsersReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusListUsersResult'
      pagination:
        $ref: '#/definitions/chorusPaginationResult'
  chorusListUsersResult:
    type: object
    properties:
      users:
        type: array
        items:
          type: object
          $ref: '#/definitions/chorusUser'
  chorusPaginationQuery:
    type: object
    properties:
      offset:
        type: integer
        format: int64
        description: Optionally offset the number of results
      limit:
        type: integer
        format: int64
        description: Optionally limit the number of results (between 1 and 500)
      sort:
        $ref: '#/definitions/chorusSort'
        description: Optionally sort the results
      query:
        type: array
        items:
          type: string
        description: Optionally filter the results
        x-example:
          - user_id=9999
          - status=STATUS_CREATED,STATUS_CLOSED
  chorusPaginationResult:
    type: object
    properties:
      total:
        type: integer
        format: int64
        description: Total number of results
      offset:
        type: integer
        format: int64
        description: Offset used for pagination
      limit:
        type: integer
        format: int64
        description: Limit used for pagination
      sort:
        $ref: '#/definitions/chorusSort'
        description: Sort order used for pagination
  chorusResetPasswordReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusResetPasswordResult'
  chorusResetPasswordResult:
    type: object
  chorusResetTotpReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusResetTotpResult'
  chorusResetTotpRequest:
    type: object
    properties:
      password:
        type: string
    title: Reset TOTP
  chorusResetTotpResult:
    type: object
    properties:
      totpSecret:
        type: string
      totpRecoveryCodes:
        type: array
        items:
          type: string
  chorusRole:
    type: object
    properties:
      id:
        type: string
        format: uint64
      name:
        type: string
      context:
        type: object
        additionalProperties:
          type: string
  chorusSort:
    type: object
    properties:
      order:
        type: string
      type:
        type: string
  chorusUpdatePasswordReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusUpdateUserResult'
  chorusUpdatePasswordRequest:
    type: object
    properties:
      currentPassword:
        type: string
      newPassword:
        type: string
    title: Update User Password
  chorusUpdateUserReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusUpdateUserResult'
    title: Update User
  chorusUpdateUserResult:
    type: object
    properties:
      user:
        $ref: '#/definitions/chorusUser'
  chorusUser:
    type: object
    properties:
      id:
        type: string
        format: uint64
      firstName:
        type: string
      lastName:
        type: string
      username:
        type: string
      source:
        type: string
      password:
        type: string
      status:
        type: string
      roles:
        type: array
        items:
          type: string
      rolesWithContext:
        type: array
        items:
          type: object
          $ref: '#/definitions/chorusRole'
      totpEnabled:
        type: boolean
      passwordChanged:
        type: boolean
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
  chorusUserFilter:
    type: object
    properties:
      idsIn:
        type: array
        items:
          type: string
          format: uint64
      workspaceIDs:
        type: array
        items:
          type: string
          format: uint64
      workbenchIDs:
        type: array
        items:
          type: string
          format: uint64
      search:
        type: string
  protobufAny:
    type: object
    properties:
      '@type':
        type: string
    additionalProperties: {}
  rpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/protobufAny'
