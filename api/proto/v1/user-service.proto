syntax = "proto3";
package chorus;
option go_package = ".;chorus";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "user.proto";
import "public_endpoint.proto";
import "common.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "chorus user service";
        version: "1.0";
        contact: {
            name: "chorus user service";
            url: "https://github.com/CHORUS-TRE/chorus-backend";
            email: "dev@chorus-tre.ch";
        };
    };
    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";
};

// Get Users
message ListUsersRequest {
    PaginationQuery pagination = 1;
}
message ListUsersReply {
    ListUsersResult result = 1;
    optional PaginationResult pagination = 2;
}
message ListUsersResult {
    repeated User users = 1;
}

// Get User (by id)
message GetUserRequest {
    uint64 id = 1;
}
message GetUserReply {
    GetUserResult result = 1;
}
message GetUserResult {
    User user = 1;
}

// Get User (me)
message GetUserMeRequest {} // No fields needed, this is for the authenticated user
message GetUserMeReply {
    GetUserMeResult result = 1;
}
message GetUserMeResult {
    User me = 1;
}

// Update User Password
message UpdatePasswordRequest {
    string currentPassword = 1;
    string newPassword = 2;
}
message UpdatePasswordReply {
    UpdateUserResult result = 1;
}
message UpdatePasswordResult {}

// Create Users
message CreateUserReply {
    CreateUserResult result = 1;
}
message CreateUserResult {
    User user = 1;
}

// Update User
message UpdateUserReply {
    UpdateUserResult result = 1;
}
message UpdateUserResult {
    User user = 1;
}

// Delete User
message DeleteUserRequest {
    uint64  id = 1;
}
message DeleteUserReply {
    DeleteUserResult result = 1;
}
message DeleteUserResult {}

// Enable TOTP
message EnableTotpRequest {
    string totp = 1;
}
message EnableTotpReply {
    EnableTotpResult result = 1;
}
message EnableTotpResult {}

// Reset TOTP
message ResetTotpRequest {
    string password = 1;
}
message ResetTotpReply {
    ResetTotpResult result = 1;
}
message ResetTotpResult {
    string totpSecret = 1;
    repeated string totpRecoveryCodes = 2;
}

// Reset Password
message ResetPasswordRequest {
    uint64 id = 1;
}
message ResetPasswordReply {
    ResetPasswordResult result = 1;
}
message ResetPasswordResult {}


service UserService {
    rpc UpdatePassword(UpdatePasswordRequest) returns (UpdatePasswordReply) {
        option (google.api.http) = {
            put: "/api/rest/v1/users/me/password"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Update password";
            description: "This endpoint updates the password of the authenticated user";
            tags: "UserService";
        };
    };

    rpc EnableTotp(EnableTotpRequest) returns (EnableTotpReply) {
        option (google.api.http) = {
            post: "/api/rest/v1/users/me/totp/enable"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Enable TOTP";
            description: "This endpoint enables the TOTP of the authenticated user";
            tags: "UserService";
        };
    };

    rpc ResetTotp(ResetTotpRequest) returns (ResetTotpReply) {
        option (google.api.http) = {
            post: "/api/rest/v1/users/me/totp/reset"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Reset TOTP";
            description: "This endpoint resets the TOTP of the authenticated user";
            tags: "UserService";
        };
    };

    rpc ListUsers(ListUsersRequest) returns (ListUsersReply) {
        option (google.api.http) = {
            get: "/api/rest/v1/users"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "List users";
            description: "This endpoint returns a list of users";
            tags: "UserService";
        };
    };

    rpc UpdateUser(User) returns (UpdateUserReply) {
        option (google.api.http) = {
            put: "/api/rest/v1/users"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Update a user";
            description: "This endpoint updates a user";
            tags: "UserService";
        };
    };

    rpc ResetPassword(ResetPasswordRequest) returns (ResetPasswordReply) {
        option (google.api.http) = {
            post: "/api/rest/v1/users/{id}/password/reset"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Reset password";
            description: "This endpoint resets a user's password";
            tags: "UserService";
        };
    };

    rpc GetUser(GetUserRequest) returns (GetUserReply) {
        option (google.api.http) = {
            get: "/api/rest/v1/users/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get a user";
            description: "This endpoint returns a user";
            tags: "UserService";
        };
    };

    rpc GetUserMe(GetUserMeRequest) returns (GetUserMeReply) {
        option (google.api.http) = {
            get: "/api/rest/v1/users/me"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get my own user";
            description: "This endpoint returns the details of the authenticated user";
            tags: "UserService";
        };
    };

    rpc DeleteUser(DeleteUserRequest) returns (DeleteUserReply) {
        option (google.api.http) = {
            delete: "/api/rest/v1/users/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Delete a user";
            description: "This endpoint deletes a user";
            tags: "UserService";
        };
    };

    rpc CreateUser(User) returns (CreateUserReply) {
        option (google.api.http) = {
            post: "/api/rest/v1/users"
            body: "*"
        };
        option (public_endpoint) = true;
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Create a user";
            description: "This endpoint creates a user";
            tags: "UserService";
            security: {}
        };
    };
}
