// This file must be the first file processed (hence its name '_swagger_annotations.proto') and is used for the merged swagger API file 'apis.swagger.json' .

syntax = "proto3";
package chorus;
option go_package = ".;chorus";

// import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "CHORUS backend API";
        description: "CHORUS backend API documentation";
        version: "1.0";
        contact: {
            name: "CHORUS dev team";
            url: "https://www.chorus-tre.ch";
        };
    };
    schemes: [HTTP,HTTPS];
    consumes: "application/json";
    produces: "application/json";
    security_definitions: {
        security: {
            key: "bearer";
            value: {
                type: TYPE_API_KEY;
                in: IN_HEADER;
                name: "Authorization";
                description: "Authentication token: Bearer <token>";
            }
        }
    }
    security: {
        security_requirement: {
            key: "bearer"
        }
    }
    responses: {
        key: "200";
        value: {
            description: "OK: indicates that the request has succeeded";
        }
    };
    responses: {
        key: "500";
        value: {
            description: "Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request";
        }
    };
    responses: {
        key: "503";
        value: {
            description: "Service Unavailable: indicates that the server is not ready to handle the request.";
        }
    };
    responses: {
        key: "404";
        value: {
            description: "Not Found: indicates that the server cannot find the requested resource";
        }
    };
    responses: {
        key: "403";
        value: {
            description: "Forbidden: indicates that the server understands the request but refuses to authorize it";
        }
    };
    responses: {
        key: "401";
        value: {
            description: "Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource";
        }
    };
    responses: {
        key: "400";
        value: {
            description: "Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)";
        }
    };

};