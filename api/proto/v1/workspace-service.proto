syntax = "proto3";
package chorus;
option go_package = ".;chorus";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/empty.proto";

import "common.proto";
import "workspace.proto";
import "user.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "chorus workspace service";
        version: "1.0";
        contact: {
            name: "chorus workspace service";
            url: "https://github.com/CHORUS-TRE/chorus-backend";
            email: "dev@chorus-tre.ch";
        };
    };
    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";
};

message ListWorkspacesRequest {
    PaginationQuery pagination = 1;
    optional WorkspaceFilter filter = 2;
}
message ListWorkspacesReply {
    ListWorkspacesResult result = 1;
    optional PaginationResult pagination = 2;
}
message ListWorkspacesResult {
    repeated Workspace workspaces = 1;
}
message WorkspaceFilter {
    repeated uint64 workspace_ids_in = 1;
}

message GetWorkspaceRequest {
    uint64 id = 1;
}
message GetWorkspaceReply {
    GetWorkspaceResult result = 1;
}
message GetWorkspaceResult {
    Workspace workspace = 1;
}

message CreateWorkspaceReply {
    CreateWorkspaceResult result = 1;
}
message CreateWorkspaceResult {
    Workspace workspace = 1;
}

message UpdateWorkspaceReply {
    UpdateWorkspaceResult result = 1;
}
message UpdateWorkspaceResult {
    Workspace workspace = 1;
}

message InviteInWorkspaceRequest {
    uint64 id = 1;
    uint64 userId = 2;
    Role role = 3;
}
message InviteInWorkspaceReply {
    InviteInWorkspaceResult result = 1;
}
message InviteInWorkspaceResult {
    Workspace workspace = 1;
}

message ManageUserRoleInWorkspaceRequest {
    uint64 id = 1;
    uint64 userId = 2;
    Role role = 3;
}
message ManageUserRoleInWorkspaceReply {
    ManageUserRoleInWorkspaceResult result = 1;
}
message ManageUserRoleInWorkspaceResult {
    Workspace workspace = 1;
}

message RemoveUserFromWorkspaceRequest {
    uint64 id = 1;
    uint64 userId = 2;
}
message RemoveUserFromWorkspaceReply {
    RemoveUserFromWorkspaceResult result = 1;
}
message RemoveUserFromWorkspaceResult {
    Workspace workspace = 1;
}

message DeleteWorkspaceRequest {
    uint64  id = 1;
}
message DeleteWorkspaceReply {
    DeleteWorkspaceResult result = 1;
}
message DeleteWorkspaceResult {}

// File management related messages
message GetWorkspaceFileRequest {
    uint64 workspaceId = 1;
    string path = 2;
}
message GetWorkspaceFileReply {
    GetWorkspaceFileResult result = 1;
}
message GetWorkspaceFileResult {
    WorkspaceFile file = 1;
    repeated WorkspaceFile children = 2;
}

message CreateWorkspaceFileRequest {
    uint64 workspaceId = 1;
    WorkspaceFile file = 2;
}
message CreateWorkspaceFileReply {
    CreateWorkspaceFileResult result = 1;
}
message CreateWorkspaceFileResult {
    WorkspaceFile file = 1;
}

message UpdateWorkspaceFileRequest {
    uint64 workspaceId = 1;
    string oldPath = 2; // For renaming or moving files
    WorkspaceFile file = 3;
}
message UpdateWorkspaceFileReply {
    UpdateWorkspaceFileResult result = 1;
}
message UpdateWorkspaceFileResult {
    WorkspaceFile file = 1;
}

message DeleteWorkspaceFileRequest {
    uint64 workspaceId = 1;
    string path = 2;
}
message DeleteWorkspaceFileReply {
    DeleteWorkspaceFileResult result = 1;
}
message DeleteWorkspaceFileResult {}

service WorkspaceService {
    rpc GetWorkspace(GetWorkspaceRequest) returns (GetWorkspaceReply) {
        option (google.api.http) = {
            get: "/api/rest/v1/workspaces/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get a workspace";
            description: "This endpoint returns a workspace";
            tags: "WorkspaceService";
        };
    };

    rpc ListWorkspaces(ListWorkspacesRequest) returns (ListWorkspacesReply) {
        option (google.api.http) = {
            get: "/api/rest/v1/workspaces"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "List workspaces";
            description: "This endpoint returns a list of workspaces";
            tags: "WorkspaceService";
        };
    };

    rpc CreateWorkspace(Workspace) returns (CreateWorkspaceReply) {
        option (google.api.http) = {
            post: "/api/rest/v1/workspaces"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Create a workspace";
            description: "This endpoint creates a workspace";
            tags: "WorkspaceService";
        };
    };

    rpc UpdateWorkspace(Workspace) returns (UpdateWorkspaceReply) {
        option (google.api.http) = {
            put: "/api/rest/v1/workspaces"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Update a workspace";
            description: "This endpoint updates a workspace";
            tags: "WorkspaceService";
        };
    };

    rpc InviteInWorkspace(InviteInWorkspaceRequest) returns (InviteInWorkspaceReply) {
        option (google.api.http) = {
            put: "/api/rest/v1/workspaces/{id}/invite"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Invite a user to a workspace";
            description: "This endpoint invites a user to a workspace";
            tags: "WorkspaceService";
        };
    };

    rpc ManageUserRoleInWorkspace(ManageUserRoleInWorkspaceRequest) returns (ManageUserRoleInWorkspaceReply) {
        option (google.api.http) = {
            post: "/api/rest/v1/workspaces/{id}/user/{userId}/role"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Manage a user's role in a workspace";
            description: "This endpoint manages a user's role in a workspace";
            tags: "WorkspaceService";
        };
    };

    rpc RemoveUserFromWorkspace(RemoveUserFromWorkspaceRequest) returns (RemoveUserFromWorkspaceReply) {
        option (google.api.http) = {
            delete: "/api/rest/v1/workspaces/{id}/user/{userId}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Remove a user from a workspace";
            description: "This endpoint removes a user from a workspace";
            tags: "WorkspaceService";
        };
    };

    rpc DeleteWorkspace(DeleteWorkspaceRequest) returns (DeleteWorkspaceReply) {
        option (google.api.http) = {
            delete: "/api/rest/v1/workspaces/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Delete a workspace";
            description: "This endpoint deletes a workspace";
            tags: "WorkspaceService";
        };
    };

    // File management methods
    rpc GetWorkspaceFile(GetWorkspaceFileRequest) returns (GetWorkspaceFileReply) {
        option (google.api.http) = {
            get: "/api/rest/v1/workspaces/{workspaceId}/files/{path=**}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "List files in a workspace";
            description: "This endpoint lists all files at given path within a workspace";
            tags: "WorkspaceService";
        };
    };

    rpc CreateWorkspaceFile(CreateWorkspaceFileRequest) returns (CreateWorkspaceFileReply) {
        option (google.api.http) = {
            post: "/api/rest/v1/workspaces/{workspaceId}/files"
            body: "file"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Create a file in a workspace";
            description: "This endpoint creates a file in a workspace at the specified path";
            tags: "WorkspaceService";
        };
    };

    rpc UpdateWorkspaceFile(UpdateWorkspaceFileRequest) returns (UpdateWorkspaceFileReply) {
        option (google.api.http) = {
            put: "/api/rest/v1/workspaces/{workspaceId}/files/{oldPath=**}"
            body: "file"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Update a file in a workspace";
            description: "This endpoint updates (rename or moves) a file in a workspace at the specified path";
            tags: "WorkspaceService";
        };
    };

    rpc DeleteWorkspaceFile(DeleteWorkspaceFileRequest) returns (DeleteWorkspaceFileReply) {
        option (google.api.http) = {
            delete: "/api/rest/v1/workspaces/{workspaceId}/files/{path=**}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Delete a file in a workspace";
            description: "This endpoint deletes a file in a workspace at the specified path";
            tags: "WorkspaceService";
        };
    };
}
