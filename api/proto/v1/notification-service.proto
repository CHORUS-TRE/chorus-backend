syntax = "proto3";
package chorus;
option go_package = ".;chorus";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/wrappers.proto";

import "notification.proto";
import "common.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "chorus notification service";
        version: "1.0";
        contact: {
            name: "chorus notification service";
            url: "https://github.com/CHORUS-TRE/chorus-backend";
            email: "dev@chorus-tre.ch";
        };
    };
    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";
};

message CountUnreadNotificationsReply {
    uint32 result = 1;
}
message MarkNotificationsAsReadRequest {
    repeated string notificationIds = 1;
    bool markAll = 2;
}
message GetNotificationsRequest {
    PaginationQuery pagination = 1;
    google.protobuf.BoolValue isRead = 2;
}
message GetNotificationsReply {
    repeated Notification result = 1;
    uint32 totalItems = 2;
}

service NotificationService {
    rpc CountUnreadNotifications(google.protobuf.Empty) returns (CountUnreadNotificationsReply) {
        option (google.api.http) = {
            get: "/api/rest/v1/notifications/count"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Count unread notifications";
            description: "This endpoint returns the amount of unread notifications";
            tags: "NotificationService";
        };
    };
    rpc MarkNotificationsAsRead(MarkNotificationsAsReadRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/rest/v1/notifications/read"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Mark a notification as read";
            description: "This endpoint marks a notification as read";
            tags: "NotificationService";
        };
    };
    rpc GetNotifications(GetNotificationsRequest) returns (GetNotificationsReply) {
        option (google.api.http) = {
            get: "/api/rest/v1/notifications"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "List notifications";
            description: "This endpoint returns a list of notifications";
            tags: "NotificationService";
        };
    };
}
